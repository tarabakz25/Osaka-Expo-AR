---
import Layout from "../layouts/Layout.astro"
import { Image } from "astro:assets"
import KamiyamaLogo from "../assets/Kamiyama_Logo.svg"
import '../styles/global.css'
import '../styles/index.css'
import BusinessCard from "../components/BusinessCard.astro"
import { projects } from '../data/projects.js'

// メンバー情報を追加
let projects = [
	{
		name: "松井ひなこ",
		romaji: "MATSUI HINAKO",
		keyword: "パフェに甘えて"
	},
	{
		name: "林美羽",
		romaji: "HAYASHI MIU",
		keyword: "わかめプロジェクト"
	},
	{
		name: "花火",
		romaji: "HANABI",
		keyword: "FRCロボコン"
	}
];

// プロジェクト配列をシャッフル
// for (let i = projects.length - 1; i > 0; i--) {
// 	const j = Math.floor(Math.random() * (i + 1));
// 	[projects[i], projects[j]] = [projects[j], projects[i]];
// }
---

<Layout>
	<div id="particles-js" class="particles-container"></div>
	
	<!-- 言語切り替えボタン -->
	<div class="language-switch">
		<button id="langSwitch" class="lang-button">
			<span id="langText">English</span>
		</button>
	</div>
	
	<div class="landing-page">
		<div class="landing-content">
			<div class="logo-container">
				<Image src={KamiyamaLogo} alt="Kamiyama Logo" class="kamiyama-logo" />
			</div>
			<h1 class="welcome-title">Connect with Kamiyama Marugoto Collage.</h1>
			<h1 class="welcome-title">神山まるごと高専とつながる。</h1>
		</div>
	</div>
	<div class="explain_text-page" id="explainPage">
		<div class="explain-content">
			<h2 data-ja="このプロジェクトは？" data-en="About This Project">このプロジェクトは？</h2>
			<p data-ja="ここでは、私たち神山まるごと高専生がARを通じて、神山まるごと高専の今を伝えるためのプロジェクトです。" data-en="In this project, we, the students of Kamiyama KOSEN, use AR technology to share what's happening at our school right now.">ここでは、私たち神山まるごと高専生がARを通じて、神山まるごと高専の今を伝えるためのプロジェクトです。</p>
			<p data-ja="目の前にあるマネキンにかざして、実際に神山まるごと高専の今を見てみてください。" data-en="Hold your device up to the mannequin in front of you to experience the current state of Kamiyama KOSEN.">目の前にあるマネキンにかざして、実際に神山まるごと高専の"今"を体験してみましょう。</p>
		</div>
	</div>
	<div class="movie_select-page" id="movieSelectPage">
		<div class="movie-select-content">
			<h2 class="page-title" data-ja="プロジェクト紹介" data-en="Project Introduction">プロジェクト紹介</h2>
			<div class="card-slider-container">
				<div class="card-slider" id="cardSlider">
					{projects.map((project, index) => (
						<div class="card-slide" data-index={index}>
							<BusinessCard
								name={project.name}
								romaji={project.romaji}
								keyword={project.keyword}
							/>
						</div>
					))}
				</div>
				<div class="swipe-hint" data-ja="← スワイプでカードを切り替え →" data-en="← Swipe to change cards →">← スワイプでカードを切り替え →</div>
			</div>
			<div class="pagination-dots" id="paginationDots">
				{projects.map((_, index) => (
					<span class="dot" data-index={index}></span>
				))}
			</div>
			<p class="tap-hint" data-ja="カードをタップして選択" data-en="Tap a card to select">カードをタップして選択</p>
		</div>
	</div>
</Layout>

<script is:inline src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

<script is:inline>
	window.onload = function() {
		particlesJS("particles-js", {
		  "particles": {
			"number": {
			  "value": 100,
			  "density": {
				"enable": true,
				"value_area": 800
			  }
			},
			"color": {
			  "value": "#A5DFFF"
			},
			"shape": {
			  "type": "circle",
			  "stroke": {
				"width": 0,
				"color": "#A5DFFF"
			  }
			},
			"opacity": {
			  "value": 0.8,
			  "random": true
			},
			"size": {
			  "value": 5,
			  "random": true
			},
			"line_linked": {
			  "enable": false,
			  "distance": 150,
			  "color": "#888888",
			  "opacity": 0.6,
			  "width": 1
			},
			"move": {
			  "enable": true,
			  "speed": 1,
			  "direction": "top",
			  "random": true,
			  "straight": false
			}
		  },
		  "interactivity": {
			"detect_on": "canvas",
			"events": {
			  "onhover": {
				"enable": true,
				"mode": "repulse"
			  },
			  "onclick": {
				"enable": true,
				"mode": "push"
			  },
			  "resize": true
			}
		  },
		  "retina_detect": true
		});

		// ページ切り替え用の要素
		const landingPage = document.querySelector('.landing-page');
		const explainPage = document.getElementById('explainPage');
		const movieSelectPage = document.getElementById('movieSelectPage');
		
		// 自動遷移のタイミング設定（ミリ秒）
		const timings = {
			landing: 3000,    // ランディングページの表示時間
			explain: 5000     // 説明ページの表示時間
		};
		
		// ページ遷移関数
		function transitionToExplain() {
			landingPage.classList.add('fade-out');
			explainPage.classList.add('fade-in');
			
			// 次のページへの遷移をスケジュール
			setTimeout(transitionToMovieSelect, timings.explain);
		}
		
		function transitionToMovieSelect() {
			explainPage.classList.remove('fade-in');
			explainPage.classList.add('fade-out');
			movieSelectPage.classList.add('fade-in');
			
			// カードスライドの初期化
			updateSlides();
		}
		
		// 自動遷移を開始
		setTimeout(transitionToExplain, timings.landing);
		
		// スライダー関連の要素と処理
		const cardSlides = document.querySelectorAll('.card-slide');
		const dots = document.querySelectorAll('.dot');
		const cardSlider = document.getElementById('cardSlider');
		
		// 現在のカードインデックス
		let currentIndex = 0;
		
		// タッチ関連の変数
		let touchStartX = 0;
		let touchEndX = 0;
		let isSwiping = false;
		
		// カードスライダーにタッチイベントを追加
		if (cardSlider) {
			cardSlider.addEventListener('touchstart', function(e) {
				e.preventDefault();
				touchStartX = e.changedTouches[0].screenX;
				isSwiping = false;
			}, { passive: false });
			
			cardSlider.addEventListener('touchmove', function(e) {
				e.preventDefault();
				const currentX = e.changedTouches[0].screenX;
				const diffX = currentX - touchStartX;
				
				if (Math.abs(diffX) > 5) {
					isSwiping = true;
				}
			}, { passive: false });
			
			cardSlider.addEventListener('touchend', function(e) {
				e.preventDefault();
				touchEndX = e.changedTouches[0].screenX;
				const swipeDistance = touchEndX - touchStartX;
				
				if (isSwiping) {
					handleSwipe(swipeDistance);
				} else {
					handleCardTap();
				}
			}, { passive: false });
		}
		
		// アクティブなカードをタップしたときの処理
		function handleCardTap() {
			console.log("カードがタップされました:", currentIndex);
			// 選択されたプロジェクトのインデックスをセッションストレージに保存
			sessionStorage.setItem('selectedProject', currentIndex);
			// AR画面へ遷移
			window.location.href = "/ar";
		}
		
		// クリックイベントもサポート（PCユーザー向け）
		cardSlides.forEach(slide => {
			slide.addEventListener('click', function() {
				if (slide.classList.contains('active')) {
					handleCardTap();
				}
			});
		});
		
		// スワイプの処理を自然な動きに修正
		function handleSwipe(swipeDistance) {
			let direction = '';
			
			if (swipeDistance > 30) { // 右スワイプ
				direction = 'right';
				if (currentIndex > 0) {
					currentIndex--;
				} else {
					currentIndex = cardSlides.length - 1;
				}
			} else if (swipeDistance < -30) { // 左スワイプ
				direction = 'left';
				if (currentIndex < cardSlides.length - 1) {
					currentIndex++;
				} else {
					currentIndex = 0;
				}
			}
			
			updateSlides(direction);
		}
		
		console.log("初期化中:", { 
			slides: cardSlides.length, 
			dots: dots.length, 
		});
		
		// 最初のスライドをアクティブに
		if (cardSlides.length > 0) {
			cardSlides[0].classList.add('active');
			if (dots.length > 0) {
				dots[0].classList.add('active');
			}
		}
		
		// スライドの状態を更新（アニメーション方向を考慮）
		function updateSlides(direction = '') {
			console.log("スライド更新:", currentIndex, "方向:", direction);
			
			// 前のインデックス値を保存（ループ処理用）
			const prevIndex = (currentIndex === 0 && direction === 'right') ? cardSlides.length - 1 : 
							 (currentIndex === cardSlides.length - 1 && direction === 'left') ? 0 : null;
			
			cardSlides.forEach((slide, index) => {
				slide.classList.remove('active', 'prev', 'next');
				
				if (index === currentIndex) {
					slide.classList.add('active');
				} else if (direction === 'left' && currentIndex === 0 && index === cardSlides.length - 1) {
					// 左スワイプで最後のカードから最初のカードに移動する場合、最後のカードを左側に配置
					slide.classList.add('prev');
				} else if (direction === 'right' && currentIndex === cardSlides.length - 1 && index === 0) {
					// 右スワイプで最初のカードから最後のカードに移動する場合、最初のカードを右側に配置
					slide.classList.add('next');
				} else if (index === prevIndex) {
					// 特別なループ処理時に、前のカードが適切な位置に配置されるようにする
					if (direction === 'right') {
						slide.classList.add('next');
					} else if (direction === 'left') {
						slide.classList.add('prev');
					}
				} else if (index < currentIndex) {
					slide.classList.add('prev');
				} else {
					slide.classList.add('next');
				}
			});
			
			// ドットの状態も更新
			dots.forEach((dot, index) => {
				if (index === currentIndex) {
					dot.classList.add('active');
				} else {
					dot.classList.remove('active');
				}
			});
		}

		// 言語切り替え機能の追加
		const langButton = document.getElementById('langSwitch');
		const langText = document.getElementById('langText');
		let currentLang = localStorage.getItem('language') || 'ja'; // 初期言語を日本語に設定
		
		// ページ読み込み時に保存された言語設定を適用
		applyLanguage(currentLang);
		
		// 言語切り替えボタンのイベントリスナー
		if (langButton) {
			langButton.addEventListener('click', function() {
				currentLang = currentLang === 'ja' ? 'en' : 'ja';
				localStorage.setItem('language', currentLang);
				applyLanguage(currentLang);
			});
		}
		
		// 言語設定を適用する関数
		function applyLanguage(lang) {
			// ボタンのテキストを更新
			if (langText) {
				langText.textContent = lang === 'ja' ? 'English' : '日本語';
			}
			
			// すべての多言語対応要素を更新
			document.querySelectorAll('[data-ja][data-en]').forEach(element => {
				element.textContent = element.getAttribute(`data-${lang}`);
			});
		}
	};
</script>