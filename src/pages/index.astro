---
import Layout from "../layouts/Layout.astro"
import { Image } from "astro:assets"
import KamiyamaLogo from "../assets/Kamiyama_Logo.svg"
import '../styles/global.css'
import BusinessCard from "../components/BusinessCard.astro"
import { projects } from '../data/projects.js'
---

<Layout>
	<div id="particles-js" class="fixed inset-0 z-1 bg-gradient-to-br from-blue-800 via-blue-600 to-blue-400 bg-[length:300%_300%] animate-gradient"></div>
	
	<!-- 波紋エフェクト用の要素 -->
	<div id="ripple-effect" class="fixed inset-0 z-90 bg-transparent pointer-events-none"></div>
	
	<!-- 言語切り替えボタン -->
	<div class="fixed top-4 right-4 z-50">
		<button id="langSwitch" class="bg-white/10 backdrop-blur-md py-2 px-4 rounded-full text-white transition-all hover:bg-white/20">
			<span id="langText">English</span>
		</button>
	</div>
	
	<div class="fixed inset-0 flex justify-center items-center z-2 bg-transparent">
		<div class="text-center p-4 w-[90%] max-w-[500px] font-[var(--default-font)] flex flex-col justify-center items-center">
			<div class="mb-6 w-full text-center dissolve">
				<Image src={KamiyamaLogo} alt="Kamiyama Logo" class="w-full max-w-[400px] h-auto mx-auto filter invert" />
			</div>
			<h1 class="text-xl mb-6 text-center w-full break-keep overflow-wrap-break-word text-white p-2.5 rounded-lg dissolve" style="animation-delay: 0.5s;">「泉」に触れる</h1>
			<h1 class="text-xl mb-6 text-center w-full break-keep overflow-wrap-break-word text-white p-2.5 rounded-lg dissolve" style="animation-delay: 1s;">Touch the "spring"</h1>
		</div>
	</div>
	<div id="explainPage" class="fixed inset-0 flex justify-center items-center z-0 opacity-0 invisible transition-opacity duration-1000 bg-black/20 backdrop-blur-sm">
		<div class="text-center p-8 w-[90%] max-w-[600px] backdrop-blur-md rounded-2xl text-white font-[var(--default-font)]">
			<h2 data-ja="体験手順" data-en="How to Experience" class="text-lg mb-4">体験手順</h2>
			<p data-ja="1,ブラウザ上で名刺をスライドし、コンテンツを選択してください" data-en="1. Slide the business cards in the browser and select content" class="mb-4 leading-relaxed">1,ブラウザ上で名刺をスライドし、コンテンツを選択してください</p>
			<p data-ja="2,カメラの使用を許可し、マネキン頭上のマーカーを読み取ってください。※この際、真上から覗き込むのではなく、画面上の白い枠にマーカーが合うようスマホを立てて読み取ってください。" data-en="2. Allow camera use and scan the marker on the mannequin head. Note: Don't look directly from above, but hold your smartphone upright so the marker fits in the white frame on the screen." class="mb-4 leading-relaxed">2,カメラの使用を許可し、マネキン頭上のマーカーを読み取ってください。※この際、真上から覗き込むのではなく、画面上の白い枠にマーカーが合うようスマホを立てて読み取ってください。</p>
			<p data-ja="3,コンテンツ終了後、感想・コメントを入力してください" data-en="3. After the content ends, please enter your impressions and comments" class="mb-4 leading-relaxed">3,コンテンツ終了後、感想・コメントを入力してください</p>
		</div>
	</div>
	<div id="movieSelectPage" class="fixed inset-0 flex justify-center items-center z-0 opacity-0 invisible transition-opacity duration-1000 bg-black/20 backdrop-blur-sm">
		<div class="text-center p-8 w-[90%] max-w-[600px]">
			<h2 class="text-center text-xl font-medium text-white mb-6" data-ja="プロジェクトを選択してください" data-en="Select a Project">プロジェクトを選択してください</h2>
			<div class="grid grid-cols-2 gap-4 p-4 justify-items-center">
				{projects.map((project, index) => (
					<div class="w-full max-w-[120px] cursor-pointer transition-all duration-300 opacity-0 translate-y-2.5 hover:translate-y-[-5px] hover:scale-105 hover:shadow-lg grid-card" data-index={index}>
						<BusinessCard
							name={project.name}
							romaji={project.romaji}
							keyword={project.keyword}
						/>
					</div>
				))}
			</div>
		</div>
	</div>
</Layout>

<!-- jQuery と ripples プラグインの読み込み -->
<script is:inline src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/jquery.ripples@0.6.3/dist/jquery.ripples.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

<style>
	@keyframes gradient {
		0% { background-position: 0% 0%; }
		25% { background-position: 50% 50%; }
		50% { background-position: 100% 100%; }
		75% { background-position: 50% 50%; }
		100% { background-position: 0% 0%; }
	}
	
	.animate-gradient {
		animation: gradient 10s ease-in-out infinite alternate;
	}
	
	/* ロゴと歓迎テキストのスタイル */
	.dissolve {
		opacity: 0;
		animation: dissolve-in 2s ease forwards;
	}
	
	@keyframes dissolve-in {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}
	
	/* フェードイン・アウトのためのユーティリティクラス */
	.fade-out {
		opacity: 0;
		transition: opacity 1.5s ease;
		pointer-events: none;
	}

	.fade-in {
		opacity: 1;
		transition: opacity 1.5s ease;
		visibility: visible !important;
		z-index: 3 !important;
	}

	.grid-card.visible {
		opacity: 1;
		transform: translateY(0);
	}
</style>

<script is:inline define:vars={{ projects }}>

	// Fisher-Yates (Knuth) Shuffle アルゴリズム
	function shuffleArray(array) {
		for (let i = array.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			[array[i], array[j]] = [array[j], array[i]];
		}
	}

	window.onload = function() {
		// ページ読み込み時にプロジェクト配列をシャッフル
		shuffleArray(projects);

		// パーティクルJS初期化
		particlesJS("particles-js", {
		  "particles": {
			"number": {
			  "value": 100,
			  "density": {
				"enable": true,
				"value_area": 800
			  }
			},
			"color": {
			  "value": "#6FB8E3" /* パーティクルの色を濃いめの青に変更 */
			},
			"shape": {
			  "type": "circle",
			  "stroke": {
				"width": 0,
				"color": "#6FB8E3" /* こちらも同じ色に変更 */
			  }
			},
			"opacity": {
			  "value": 0.5, /* 不透明度を下げる */
			  "random": true
			},
			"size": {
			  "value": 5,
			  "random": true
			},
			"line_linked": {
			  "enable": false,
			  "distance": 150,
			  "color": "#888888",
			  "opacity": 0.6,
			  "width": 1
			},
			"move": {
			  "enable": true,
			  "speed": 0.5,
			  "direction": "top",
			  "random": true,
			  "straight": false
			}
		  },
		  "interactivity": {
			"detect_on": "canvas",
			"events": {
			  "onhover": {
				"enable": true,
				"mode": "repulse"
			  },
			  "onclick": {
				"enable": true,
				"mode": "push"
			  },
			  "resize": true
			}
		  },
		  "retina_detect": true
		});
		
		// jQuery.ripples の初期化
		try {
			$('#ripple-effect').ripples({
				resolution: 500, 
				dropRadius: 20,  // 波紋の大きさを大きく
				perturbance: 0.15 // 波紋の揺れを強く
			});
			
			// 自動で波紋を発生させる（初期表示用）
			setTimeout(function() {
				// 画面中央に波紋を発生
				const centerX = $('#ripple-effect').width() / 2;
				const centerY = $('#ripple-effect').height() / 2;
				
				$('#ripple-effect').ripples('drop', centerX, centerY, 20, 0.25); // サイズと強度を上げる
				setTimeout(function() {$('#ripple-effect').ripples('drop', centerX, centerY, 20, 0.25);}, 300);
				setTimeout(function() {$('#ripple-effect').ripples('drop', centerX, centerY, 20, 0.25);}, 600);
			}, 300);
		} catch (e) {
			console.error('Wave effects not supported by browser:', e);
		}

		// コンテンツ表示の制御
		const logoContainer = document.querySelector('.logo-container');
		const welcomeTitles = document.querySelectorAll('.welcome-title');
		
		// ロゴとテキストを波紋エフェクト後に表示（遅延を3秒に短縮）
		setTimeout(() => {
			// ロゴとテキストを同時に表示して、アニメーション効果を適用
			logoContainer.classList.remove('hidden');
			logoContainer.classList.add('fade-in');
			
			welcomeTitles.forEach((title, index) => {
				// タイトルを同時に表示
				title.classList.remove('hidden');
				title.classList.add('fade-in');
			});
			
		}, 3000); // 波紋エフェクトが完了した後にコンテンツを表示（短縮）
		
		// ページ切り替え用の要素
		const landingPage = document.querySelector('.landing-page');
		const explainPage = document.getElementById('explainPage');
		const movieSelectPage = document.getElementById('movieSelectPage');
		
		// 自動遷移のタイミング設定（ミリ秒）
		const timings = {
			landing: 500,    // ランディングページの表示時間を短縮
			explain: 3000      // 説明ページの表示時間を延長
		};
		
		// ページ遷移関数
		function transitionToExplain() {
			console.log("説明ページへ遷移します");
			landingPage.classList.add('fade-out');
			explainPage.classList.add('fade-in');
			
			// 次のページへの遷移をスケジュール
			setTimeout(transitionToMovieSelect, timings.explain);
		}
		
		function transitionToMovieSelect() {
			console.log("動画選択ページへ遷移します");
			explainPage.classList.remove('fade-in');
			explainPage.classList.add('fade-out');
			movieSelectPage.classList.add('fade-in');
			
			// グリッドカードの初期化
			initializeGridCards();
		}
		
		// タイトルアニメーション完了後に自動遷移を開始するための計算時間も調整
		// 波紋(3000ms) + コンテンツ表示(1000ms) + 表示後の余裕(1000ms) = 5000ms
		const totalAnimationTime = 5000;
		setTimeout(transitionToExplain, totalAnimationTime + timings.landing);
		
		// グリッドカード関連の処理
		const gridCards = document.querySelectorAll('.grid-card');
		
		// カードを順番に表示
		function initializeGridCards() {
			gridCards.forEach((card, index) => {
				setTimeout(() => {
					card.classList.add('visible');
				}, index * 200); // 200ms間隔でフェードイン
			});
		}
		
		// カードクリックイベント
		gridCards.forEach((card) => {
			card.addEventListener('click', function() {
				const index = parseInt(this.getAttribute('data-index'));
				
				console.log("カードがクリックされました:", index);
				// デバッグ情報を追加
				console.log("選択されたプロジェクト:", projects[index]);
				
				// 選択されたプロジェクトのインデックスをセッションストレージに保存
				sessionStorage.setItem('selectedProject', index.toString());
				console.log("sessionStorageに保存しました", sessionStorage.getItem('selectedProject'));
				
				// 少し遅延させてAR画面へ遷移
				setTimeout(() => {
					window.location.href = "/ar";
				}, 100);
			});
		});

		// 言語切り替え機能の追加
		const langButton = document.getElementById('langSwitch');
		const langText = document.getElementById('langText');
		let currentLang = localStorage.getItem('language') || 'ja'; // 初期言語を日本語に設定
		
		// ページ読み込み時に保存された言語設定を適用
		applyLanguage(currentLang);
		
		// 言語切り替えボタンのイベントリスナー
		if (langButton) {
			langButton.addEventListener('click', function() {
				currentLang = currentLang === 'ja' ? 'en' : 'ja';
				localStorage.setItem('language', currentLang);
				applyLanguage(currentLang);
			});
		}
		
		// 言語設定を適用する関数
		function applyLanguage(lang) {
			// ボタンのテキストを更新
			if (langText) {
				langText.textContent = lang === 'ja' ? 'English' : '日本語';
			}
			
			// すべての多言語対応要素を更新
			document.querySelectorAll('[data-ja][data-en]').forEach(element => {
				element.textContent = element.getAttribute(`data-${lang}`);
			});
		}

		// 波紋エフェクトの後にディゾルブアニメーションを開始
		setTimeout(() => {
			document.querySelectorAll('.dissolve').forEach(element => {
				element.style.animationPlayState = 'running';
			});
		}, 2000);
	};
</script>