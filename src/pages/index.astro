---
import Layout from "../layouts/Layout.astro"
import { Image } from "astro:assets"
import KamiyamaLogo from "../assets/Kamiyama_Logo.svg"
import '../styles/global.css'
import '../styles/index.css'
import BusinessCard from "../components/BusinessCard.astro"
import { projects } from '../data/projects.js'
---

<Layout>
	<div id="particles-js" class="particles-container"></div>
	
	<!-- 波紋エフェクト用の要素 -->
	<div id="ripple-effect" class="ripple-container"></div>
	
	<!-- 言語切り替えボタン -->
	<div class="language-switch">
		<button id="langSwitch" class="lang-button">
			<span id="langText">English</span>
		</button>
	</div>
	
	<div class="landing-page">
		<div class="landing-content">
			<div class="logo-container dissolve">
				<Image src={KamiyamaLogo} alt="Kamiyama Logo" class="kamiyama-logo" />
			</div>
			<h1 class="welcome-title dissolve" style="animation-delay: 0.5s;">「泉」に触れる</h1>
			<h1 class="welcome-title dissolve" style="animation-delay: 1s;">Touch the "spring"</h1>
		</div>
	</div>
	<div class="explain_text-page" id="explainPage">
		<div class="explain-content">
			<h2 data-ja="このプロジェクトは？" data-en="About This Project">このプロジェクトは？</h2>
			<p data-ja="この泉は、神山まるごと高専生の“頭の中”。" data-en="This fountain is the “inside of the head” of the students of Kamiyama Marugoto College of Technology.">この泉は、神山まるごと高専生の“頭の中”。</p>
			<p data-ja="透明で静かなようで、実は内側からアイデアが湧き出ています。" data-en="It seems clear and quiet, but in fact, ideas are bubbling up from within.">透明で静かなようで、実は内側からアイデアが湧き出ています。</p>
			<p data-ja="その泉を、今、あなたが覗こうとしています。" data-en="Now you are about to take a peek into that fountain.">その泉を、今、あなたが覗こうとしています。</p>
		</div>
	</div>
	<div class="movie_select-page" id="movieSelectPage">
		<div class="movie-select-content">
			<h2 class="page-title" data-ja="プロジェクト紹介" data-en="Project Introduction">プロジェクト紹介</h2>
			<div class="card-slider-container">
				<div class="card-slider" id="cardSlider">
					{projects.map((project, index) => (
						<div class="card-slide" data-index={index}>
							<BusinessCard
								name={project.name}
								romaji={project.romaji}
								keyword={project.keyword}
							/>
						</div>
					))}
				</div>
				<div class="swipe-hint" data-ja="← スワイプでカードを切り替え →" data-en="← Swipe to change cards →">← スワイプでカードを切り替え →</div>
			</div>
			<div class="pagination-dots" id="paginationDots">
				{projects.map((_, index) => (
					<span class="dot" data-index={index}></span>
				))}
			</div>
			<p class="tap-hint" data-ja="カードをタップして選択" data-en="Tap a card to select">カードをタップして選択</p>
		</div>
	</div>
</Layout>

<!-- jQuery と ripples プラグインの読み込み -->
<script is:inline src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/jquery.ripples@0.6.3/dist/jquery.ripples.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

<style>
	/* 波紋エフェクト用のスタイル */
	.ripple-container {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 90;
		background-color: transparent; /* 背景色を透明に変更 */
		pointer-events: none;
	}
	
	/* ロゴと歓迎テキストのスタイル */
	.logo-container.hidden {
		opacity: 0;
	}
	
	.logo-container.fade-in {
		animation: logo-fade-in 1.5s ease forwards;
	}
	
	@keyframes logo-fade-in {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}
	
	/* タイトルのディゾルブエフェクト */
	.welcome-title.hidden {
		opacity: 0;
	}
	
	.welcome-title.fade-in {
		animation: fade-in 1.5s ease forwards;
	}
	
	@keyframes fade-in {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}
	
	/* コンテンツをより見やすくするためのスタイル追加 */
	.landing-content {
		position: relative;
		z-index: 95;
		padding: 20px;
		border-radius: 10px;
		max-width: 800px;
		margin: 0 auto;
	}
	
	.welcome-title {
		color: white;
		text-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* テキストにシャドウを追加して読みやすく */
		margin: 15px 0;
	}
	
	.kamiyama-logo {
		max-width: 280px;
		margin: 0 auto;
		display: block;
	}
	
	/* ページ遷移アニメーション */
	.fade-out {
		opacity: 0;
		transition: opacity 1.5s ease;
		pointer-events: none;
	}

	.fade-in {
		opacity: 1;
		transition: opacity 1.5s ease;
	}

	.landing-page, .explain_text-page, .movie_select-page {
		transition: opacity 1.5s ease;
	}

	.explain_text-page, .movie_select-page {
		opacity: 0;
	}
	
	/* ディゾルブアニメーション */
	.dissolve {
		opacity: 0;
		animation: dissolve-in 2s ease forwards;
	}
	
	@keyframes dissolve-in {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}
</style>

<script is:inline define:vars={{ projects }}>

	// Fisher-Yates (Knuth) Shuffle アルゴリズム
	function shuffleArray(array) {
		for (let i = array.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			[array[i], array[j]] = [array[j], array[i]];
		}
	}

	window.onload = function() {
		// ページ読み込み時にプロジェクト配列をシャッフル
		shuffleArray(projects);

		// パーティクルJS初期化
		particlesJS("particles-js", {
		  "particles": {
			"number": {
			  "value": 100,
			  "density": {
				"enable": true,
				"value_area": 800
			  }
			},
			"color": {
			  "value": "#6FB8E3" /* パーティクルの色を濃いめの青に変更 */
			},
			"shape": {
			  "type": "circle",
			  "stroke": {
				"width": 0,
				"color": "#6FB8E3" /* こちらも同じ色に変更 */
			  }
			},
			"opacity": {
			  "value": 0.5, /* 不透明度を下げる */
			  "random": true
			},
			"size": {
			  "value": 5,
			  "random": true
			},
			"line_linked": {
			  "enable": false,
			  "distance": 150,
			  "color": "#888888",
			  "opacity": 0.6,
			  "width": 1
			},
			"move": {
			  "enable": true,
			  "speed": 0.5,
			  "direction": "top",
			  "random": true,
			  "straight": false
			}
		  },
		  "interactivity": {
			"detect_on": "canvas",
			"events": {
			  "onhover": {
				"enable": true,
				"mode": "repulse"
			  },
			  "onclick": {
				"enable": true,
				"mode": "push"
			  },
			  "resize": true
			}
		  },
		  "retina_detect": true
		});
		
		// jQuery.ripples の初期化
		try {
			$('#ripple-effect').ripples({
				resolution: 500, 
				dropRadius: 20,  // 波紋の大きさを大きく
				perturbance: 0.15 // 波紋の揺れを強く
			});
			
			// 自動で波紋を発生させる（初期表示用）
			setTimeout(function() {
				// 画面中央に波紋を発生
				const centerX = $('#ripple-effect').width() / 2;
				const centerY = $('#ripple-effect').height() / 2;
				
				$('#ripple-effect').ripples('drop', centerX, centerY, 20, 0.25); // サイズと強度を上げる
				setTimeout(function() {$('#ripple-effect').ripples('drop', centerX, centerY, 20, 0.25);}, 300);
				setTimeout(function() {$('#ripple-effect').ripples('drop', centerX, centerY, 20, 0.25);}, 600);
			}, 300);
		} catch (e) {
			console.error('Wave effects not supported by browser:', e);
		}

		// コンテンツ表示の制御
		const logoContainer = document.querySelector('.logo-container');
		const welcomeTitles = document.querySelectorAll('.welcome-title');
		
		// ロゴとテキストを波紋エフェクト後に表示（遅延を3秒に短縮）
		setTimeout(() => {
			// ロゴとテキストを同時に表示して、アニメーション効果を適用
			logoContainer.classList.remove('hidden');
			logoContainer.classList.add('fade-in');
			
			welcomeTitles.forEach((title, index) => {
				// タイトルを同時に表示
				title.classList.remove('hidden');
				title.classList.add('fade-in');
			});
			
		}, 3000); // 波紋エフェクトが完了した後にコンテンツを表示（短縮）
		
		// ページ切り替え用の要素
		const landingPage = document.querySelector('.landing-page');
		const explainPage = document.getElementById('explainPage');
		const movieSelectPage = document.getElementById('movieSelectPage');
		
		// 自動遷移のタイミング設定（ミリ秒）
		const timings = {
			landing: 500,    // ランディングページの表示時間を短縮
			explain: 3000      // 説明ページの表示時間を延長
		};
		
		// ページ遷移関数
		function transitionToExplain() {
			console.log("説明ページへ遷移します");
			landingPage.classList.add('fade-out');
			explainPage.classList.add('fade-in');
			
			// 次のページへの遷移をスケジュール
			setTimeout(transitionToMovieSelect, timings.explain);
		}
		
		function transitionToMovieSelect() {
			console.log("動画選択ページへ遷移します");
			explainPage.classList.remove('fade-in');
			explainPage.classList.add('fade-out');
			movieSelectPage.classList.add('fade-in');
			
			// カードスライドの初期化
			updateSlides();
		}
		
		// タイトルアニメーション完了後に自動遷移を開始するための計算時間も調整
		// 波紋(3000ms) + コンテンツ表示(1000ms) + 表示後の余裕(1000ms) = 5000ms
		const totalAnimationTime = 5000;
		setTimeout(transitionToExplain, totalAnimationTime + timings.landing);
		
		// スライダー関連の要素と処理
		const cardSlides = document.querySelectorAll('.card-slide');
		const dots = document.querySelectorAll('.dot');
		const cardSlider = document.getElementById('cardSlider');
		
		// 現在のカードインデックス
		let currentIndex = 0;
		
		// タッチ関連の変数
		let touchStartX = 0;
		let touchEndX = 0;
		let isSwiping = false;
		
		// カードスライダーにタッチイベントを追加
		if (cardSlider) {
			cardSlider.addEventListener('touchstart', function(e) {
				e.preventDefault();
				touchStartX = e.changedTouches[0].screenX;
				isSwiping = false;
			}, { passive: false });
			
			cardSlider.addEventListener('touchmove', function(e) {
				e.preventDefault();
				const currentX = e.changedTouches[0].screenX;
				const diffX = currentX - touchStartX;
				
				if (Math.abs(diffX) > 5) {
					isSwiping = true;
				}
			}, { passive: false });
			
			cardSlider.addEventListener('touchend', function(e) {
				e.preventDefault();
				touchEndX = e.changedTouches[0].screenX;
				const swipeDistance = touchEndX - touchStartX;
				
				if (isSwiping) {
					handleSwipe(swipeDistance);
				} else {
					handleCardTap();
				}
			}, { passive: false });
		}
		
		// アクティブなカードをタップしたときの処理
		function handleCardTap() {
			console.log("カードがタップされました:", currentIndex);
			// デバッグ情報を追加
			console.log("選択されたプロジェクト:", projects[currentIndex]);
			
			// 選択されたプロジェクトのインデックスをセッションストレージに保存
			sessionStorage.setItem('selectedProject', currentIndex);
			console.log("sessionStorageに保存しました", sessionStorage.getItem('selectedProject'));
			
			// 少し遅延させてAR画面へ遷移
			setTimeout(() => {
				window.location.href = "/ar";
			}, 100);
		}
		
		// クリックイベントもサポート（PCユーザー向け）
		cardSlides.forEach(slide => {
			slide.addEventListener('click', function() {
				if (slide.classList.contains('active')) {
					handleCardTap();
				}
			});
		});
		
		// スワイプの処理を自然な動きに修正
		function handleSwipe(swipeDistance) {
			let direction = '';
			
			if (swipeDistance > 30) { // 右スワイプ
				direction = 'right';
				if (currentIndex > 0) {
					currentIndex--;
				} else {
					currentIndex = cardSlides.length - 1;
				}
			} else if (swipeDistance < -30) { // 左スワイプ
				direction = 'left';
				if (currentIndex < cardSlides.length - 1) {
					currentIndex++;
				} else {
					currentIndex = 0;
				}
			}
			
			updateSlides(direction);
		}
		
		console.log("初期化中:", { 
			slides: cardSlides.length, 
			dots: dots.length, 
		});
		
		// 最初のスライドをアクティブに
		if (cardSlides.length > 0) {
			cardSlides[0].classList.add('active');
			if (dots.length > 0) {
				dots[0].classList.add('active');
			}
		}
		
		// スライドの状態を更新（アニメーション方向を考慮）
		function updateSlides(direction = '') {
			console.log("スライド更新:", currentIndex, "方向:", direction);
			
			// 前のインデックス値を保存（ループ処理用）
			const prevIndex = (currentIndex === 0 && direction === 'right') ? cardSlides.length - 1 : 
							 (currentIndex === cardSlides.length - 1 && direction === 'left') ? 0 : null;
			
			cardSlides.forEach((slide, index) => {
				slide.classList.remove('active', 'prev', 'next');
				
				if (index === currentIndex) {
					slide.classList.add('active');
				} else if (direction === 'left' && currentIndex === 0 && index === cardSlides.length - 1) {
					// 左スワイプで最後のカードから最初のカードに移動する場合、最後のカードを左側に配置
					slide.classList.add('prev');
				} else if (direction === 'right' && currentIndex === cardSlides.length - 1 && index === 0) {
					// 右スワイプで最初のカードから最後のカードに移動する場合、最初のカードを右側に配置
					slide.classList.add('next');
				} else if (index === prevIndex) {
					// 特別なループ処理時に、前のカードが適切な位置に配置されるようにする
					if (direction === 'right') {
						slide.classList.add('next');
					} else if (direction === 'left') {
						slide.classList.add('prev');
					}
				} else if (index < currentIndex) {
					slide.classList.add('prev');
				} else {
					slide.classList.add('next');
				}
			});
			
			// ドットの状態も更新
			dots.forEach((dot, index) => {
				if (index === currentIndex) {
					dot.classList.add('active');
				} else {
					dot.classList.remove('active');
				}
			});
		}

		// 言語切り替え機能の追加
		const langButton = document.getElementById('langSwitch');
		const langText = document.getElementById('langText');
		let currentLang = localStorage.getItem('language') || 'ja'; // 初期言語を日本語に設定
		
		// ページ読み込み時に保存された言語設定を適用
		applyLanguage(currentLang);
		
		// 言語切り替えボタンのイベントリスナー
		if (langButton) {
			langButton.addEventListener('click', function() {
				currentLang = currentLang === 'ja' ? 'en' : 'ja';
				localStorage.setItem('language', currentLang);
				applyLanguage(currentLang);
			});
		}
		
		// 言語設定を適用する関数
		function applyLanguage(lang) {
			// ボタンのテキストを更新
			if (langText) {
				langText.textContent = lang === 'ja' ? 'English' : '日本語';
			}
			
			// すべての多言語対応要素を更新
			document.querySelectorAll('[data-ja][data-en]').forEach(element => {
				element.textContent = element.getAttribute(`data-${lang}`);
			});
		}

		// 波紋エフェクトの後にディゾルブアニメーションを開始
		setTimeout(() => {
			document.querySelectorAll('.dissolve').forEach(element => {
				element.style.animationPlayState = 'running';
			});
		}, 2000);
	};
</script>