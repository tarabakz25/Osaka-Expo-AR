---
import Layout from "../layouts/Layout.astro"
import { projects } from "../data/projects.js"
import "../styles/global.css"
---

<Layout>
	<!-- パーティクル背景 -->
	<div 
		id="particles-js" 
		class="fixed top-0 left-0 w-full h-full z-10 bg-gradient-to-br from-primary-blue-600 via-primary-blue-800 via-primary-blue-700 to-primary-blue-900 bg-[length:300%_300%] animate-gradient"
	></div>
	
	<!-- メインコンテナ -->
	<div class="relative z-20 max-w-2xl mx-auto px-8 py-8 text-white flex flex-col items-center justify-center min-h-screen">
		<h2 class="text-center mb-8 text-lg backdrop-blur-sm">
			ご視聴ありがとうございました！良ければ、学生にメッセージをお願いいたします。
		</h2>

		<form id="messageForm" class="w-full rounded-lg backdrop-blur-sm">
			<!-- 名前入力 -->
			<div class="mb-6 text-center w-full flex flex-col items-center">
				<label for="name" class="block mb-2 text-center text-lg w-full text-white">
					お名前（ニックネーム）
				</label>
				<input
					type="text"
					id="name"
					name="name"
					class="w-full max-w-full px-3 py-3 rounded-lg border border-white/30 text-base bg-white/20 text-white text-center placeholder-white/70 focus:outline-none focus:ring-2 focus:ring-white/50"
					placeholder="お名前を入力"
				/>
			</div>

			<!-- プロジェクト選択 -->
			<div class="mb-6 text-center w-full flex flex-col items-center">
				<label for="projectName" class="block mb-2 text-center text-lg text-white">
					見たプロジェクト
				</label>
				<select
					id="projectName"
					name="projectName"
					class="w-full max-w-full px-3 py-3 rounded-lg border border-white/30 text-base bg-white/20 text-white text-center appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-white/50"
					style="text-align-last: center; background-image: url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 24 24\' fill=\'white\'%3e%3cpath d=\'M7 10l5 5 5-5z\'/%3e%3c/svg%3e'); background-repeat: no-repeat; background-position: right 0.75rem center; background-size: 16px 12px;"
					required
				>
					<option value="" disabled selected class="bg-primary-blue-800 text-white">
						プロジェクトを選択してください
					</option>
					{
						projects.map((project, index) => (
							<option value={index} class="bg-primary-blue-800 text-white">
								{project.name} - {project.keyword}
							</option>
						))
					}
				</select>
			</div>

			<!-- メッセージ入力 -->
			<div class="mb-6 text-center w-full flex flex-col items-center">
				<label for="message" class="block mb-2 text-center text-lg w-full text-white">
					メッセージ
				</label>
				<textarea
					id="message"
					name="message"
					rows="5"
					required
					class="w-full max-w-full px-3 py-3 rounded-lg border border-white/30 text-base bg-white/20 text-white text-center placeholder-white/70 resize-y min-h-[120px] focus:outline-none focus:ring-2 focus:ring-white/50"
					placeholder="メッセージを入力"
				></textarea>
			</div>

			<!-- ボタン -->
			<div class="flex justify-around mt-8 w-full">
				<button 
					type="submit" 
					class="px-6 py-3 rounded-full border-none text-base cursor-pointer text-center min-w-[120px] transition-all duration-300 bg-green-500 text-white hover:bg-green-600 hover:-translate-y-0.5"
				>
					送信する
				</button>
				<a 
					href="/" 
					class="px-6 py-3 rounded-full border-none text-base cursor-pointer no-underline text-center min-w-[120px] transition-all duration-300 bg-white/20 text-white hover:bg-white/30 hover:-translate-y-0.5"
				>
					トップに戻る
				</a>
			</div>
		</form>

		<!-- 送信完了メッセージ -->
		<div
			id="thankYouMessage"
			class="bg-white/15 p-8 rounded-lg text-center backdrop-blur-sm w-full shadow-lg hidden"
		>
			<h2 class="text-xl mb-4">メッセージを送信しました！</h2>
			<p class="mb-6">ご参加いただきありがとうございます。</p>
			<a 
				href="/" 
				class="px-6 py-3 rounded-full border-none text-base cursor-pointer no-underline text-center min-w-[120px] transition-all duration-300 bg-white/20 text-white hover:bg-white/30 hover:-translate-y-0.5"
			>
				トップに戻る
			</a>
		</div>
	</div>
</Layout>

<script is:inline src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

<script define:vars={{ projects }}>
	// ステップ1でコピーしたGoogle Apps ScriptのWebアプリURLをここに貼り付け
	const GOOGLE_APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyiSJ660RQD7LVRLk5fthYR6_46p4c8wd9Dzj2V7i8ykdCsHCON3GQHonz4pCSDL82E/exec'; // GAS URLをここに定義
	
	// プロジェクトデータを定義
	const projectsData = projects;

	document.addEventListener('DOMContentLoaded', function() {
		// パーティクルJS初期化
		if (typeof window.particlesJS !== 'undefined') {
			window.particlesJS("particles-js", {
				particles: {
					number: {
						value: 100,
						density: {
							enable: true,
							value_area: 800,
						},
					},
					color: {
						value: "#A5DFFF",
					},
					shape: {
						type: "circle",
						stroke: {
							width: 0,
							color: "#A5DFFF",
						},
					},
					opacity: {
						value: 0.8,
						random: true,
					},
					size: {
						value: 5,
						random: true,
					},
					line_linked: {
						enable: false,
						distance: 150,
						color: "#888888",
						opacity: 0.6,
						width: 1,
					},
					move: {
						enable: true,
						speed: 0.5,
						direction: "top",
						random: true,
						straight: false,
					},
				},
				interactivity: {
					detect_on: "canvas",
					events: {
						onhover: {
							enable: true,
							mode: "repulse",
						},
						onclick: {
							enable: true,
							mode: "push",
						},
						resize: true,
					},
				},
				retina_detect: true,
			})
		}

		// セッションストレージから選択されたプロジェクトを取得
		const selectedProjectIndex = sessionStorage.getItem('selectedProject');
		const projectNameSelect = document.getElementById('projectName');
		const messageForm = document.getElementById('messageForm');
		const thankYouMessage = document.getElementById('thankYouMessage');
		
		console.log("選択されたプロジェクトインデックス:", selectedProjectIndex);
		
		// セッションストレージに保存されたプロジェクトがあれば、そのプロジェクトを選択状態にする
		if (selectedProjectIndex !== null && projectsData[selectedProjectIndex] && projectNameSelect instanceof HTMLSelectElement) {
			projectNameSelect.value = selectedProjectIndex;
		}
		
		// フォーム送信イベントの処理
		if (messageForm instanceof HTMLFormElement) {
			messageForm.addEventListener('submit', async (e) => {
				e.preventDefault();
				
				// 送信ボタンを取得して無効化、テキストを変更
				const submitButton = messageForm.querySelector('button[type="submit"]');
				if (submitButton instanceof HTMLButtonElement) {
					submitButton.disabled = true;
					submitButton.textContent = '送信中...';
				}
				
				const formData = new FormData(messageForm);
				const selectedProjectIndexValue = formData.get("projectName"); // selectから選択されたプロジェクトのインデックス

				// projectIndexからプロジェクト名を取得
				let projectName = "";
				const selectedProject = projectsData[Number(selectedProjectIndexValue)]; // projectsDataからデータ取得
				if (selectedProject) {
					projectName = `${selectedProject.name} - ${selectedProject.keyword}`;
				}

				// Google Apps Scriptに送信するデータペイロードを作成
				const payload = {
					timestamp: new Date().toISOString(),
					projectIndex: selectedProjectIndexValue,
					projectName: projectName, // プロジェクト名を追加
					name: formData.get("name"), // フォームからの名前
					message: formData.get("message"), // フォームからのメッセージ
				};

				// Google Apps Script の Web アプリ URL が設定されているか確認
				if (!GOOGLE_APPS_SCRIPT_URL) {
					alert("送信先のURLが設定されていません。");
					console.error("GOOGLE_APPS_SCRIPT_URL is not set.");
					return // URLがなければ処理を中断
				}

				try {
					// 直接 Google Apps Script の Web アプリにデータを POST 送信
					const response = await fetch(GOOGLE_APPS_SCRIPT_URL, {
						method: "POST",
						mode: 'no-cors', // GAS側でCORS設定が難しい場合の回避策だが、レスポンスは受け取れない
						headers: {
							// 'Content-Type': 'application/json', // GAS側が application/json を受け付ける場合
							"Content-Type": "text/plain;charset=utf-8", // GAS doPost(e) で e.postData.contents を使う場合 text/plain が扱いやすいことがある
						},
						body: JSON.stringify(payload), // GAS側で JSON.parse(e.postData.contents) する想定
					});

					// no-corsモードではresponse.okは確認できないため、常に成功として処理する
					// 送信成功メッセージを表示
					if (messageForm instanceof HTMLFormElement && thankYouMessage instanceof HTMLElement) {
						messageForm.classList.add('hidden');
						thankYouMessage.classList.remove('hidden');
					}
				} catch (error) {
					console.error('送信中にエラーが発生しました:', error);
					alert('エラーが発生しました。ネットワーク接続を確認するか、もう一度お試しください。');
					
					// エラー時はボタンを元に戻す
					if (submitButton instanceof HTMLButtonElement) {
						submitButton.disabled = false;
						submitButton.textContent = '送信する';
					}
				}
			});
		}
	});
</script>
