---
import Layout from "../layouts/Layout.astro";
import { projects } from '../data/projects.js';
import '../styles/global.css';
import '../styles/message.css';
---

<Layout>
    <div id="particles-js" class="particles-container"></div>
    <div class="message-container">
        <h2 class="message-title">ご視聴ありがとうございました！良ければ、学生にメッセージをお願いいたします。</h2>
        
        <form id="messageForm" class="message-form">
            <div class="form-group">
                <label for="name">お名前（ニックネーム）</label>
                <input type="text" id="name" name="name" class="form-input" placeholder="お名前を入力">
            </div>
            
            <div class="form-project-name">
                <label for="projectName">見たプロジェクト</label>
                <select id="projectName" name="projectName" class="form-select" required>
                    <option value="" disabled selected>プロジェクトを選択してください</option>
                    {projects.map((project, index) => (
                        <option value={index}>{project.name} - {project.keyword}</option>
                    ))}
                </select>
            </div>
            <div class="form-group">
                <label for="message">メッセージ</label>
                <textarea id="message" name="message" rows="5" required class="form-textarea" placeholder="メッセージを入力"></textarea>
            </div>
            
            <div class="form-actions">
                <button type="submit" class="submit-button">送信する</button>
                <a href="/" class="back-button">トップに戻る</a>
            </div>
        </form>
        
        <div id="thankYouMessage" class="thank-you-message" style="display: none;">
            <h2>メッセージを送信しました！</h2>
            <p>ご参加いただきありがとうございます。</p>
            <a href="/" class="back-button">トップに戻る</a>
        </div>
    </div>
</Layout>

<script is:inline src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

<script>
    // まず必要なデータを取得
    const projectsData = [
        {
            name: "松井ひなこ",
            romaji: "MATSUI HINAKO",
            keyword: "パフェに甘えて",
            dir: "pafe"
        },
        {
            name: "林美羽",
            romaji: "HAYASHI MIU",
            keyword: "わかめプロジェクト",
            dir: "wakame"
        },
        {
            name: "花火",
            romaji: "HANABI",
            keyword: "FRCロボコン",
            dir: "hanabi"
        }
    ];

    // ステップ1でコピーしたGoogle Apps ScriptのWebアプリURLをここに貼り付け
    const GOOGLE_APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyiSJ660RQD7LVRLk5fthYR6_46p4c8wd9Dzj2V7i8ykdCsHCON3GQHonz4pCSDL82E/exec'; // GAS URLをここに定義

    window.onload = function() {
        // パーティクルJS初期化
        particlesJS("particles-js", {
          "particles": {
            "number": {
              "value": 100,
              "density": {
                "enable": true,
                "value_area": 800
              }
            },
            "color": {
              "value": "#A5DFFF"
            },
            "shape": {
              "type": "circle",
              "stroke": {
                "width": 0,
                "color": "#A5DFFF"
              }
            },
            "opacity": {
              "value": 0.8,
              "random": true
            },
            "size": {
              "value": 5,
              "random": true
            },
            "line_linked": {
              "enable": false,
              "distance": 150,
              "color": "#888888",
              "opacity": 0.6,
              "width": 1
            },
            "move": {
              "enable": true,
              "speed": 1,
              "direction": "top",
              "random": true,
              "straight": false
            }
          },
          "interactivity": {
            "detect_on": "canvas",
            "events": {
              "onhover": {
                "enable": true,
                "mode": "repulse"
              },
              "onclick": {
                "enable": true,
                "mode": "push"
              },
              "resize": true
            }
          },
          "retina_detect": true
        });
        
        // セッションストレージから選択されたプロジェクトを取得
        const selectedProjectIndex = sessionStorage.getItem('selectedProject');
        const projectNameSelect = document.getElementById('projectName');
        const messageForm = document.getElementById('messageForm');
        const thankYouMessage = document.getElementById('thankYouMessage');
        
        console.log("選択されたプロジェクトインデックス:", selectedProjectIndex);
        
        // セッションストレージに保存されたプロジェクトがあれば、そのプロジェクトを選択状態にする
        if (selectedProjectIndex !== null && projectsData[selectedProjectIndex]) {
            projectNameSelect.value = selectedProjectIndex;
        }
        
        // フォーム送信イベントの処理
        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(messageForm);
            const selectedProjectIndexValue = formData.get('projectName'); // selectから選択されたプロジェクトのインデックス
            
            // projectIndexからプロジェクト名を取得
            let projectName = '';
            const selectedProject = projectsData[Number(selectedProjectIndexValue)]; // projectsDataからデータ取得
            if (selectedProject) {
                projectName = `${selectedProject.name} - ${selectedProject.keyword}`;
            }
            
            // Google Apps Scriptに送信するデータペイロードを作成
            const payload = {
                timestamp: new Date().toISOString(),
                projectIndex: selectedProjectIndexValue,
                projectName: projectName, // プロジェクト名を追加
                name: formData.get('name'),        // フォームからの名前
                message: formData.get('message'),    // フォームからのメッセージ
            };
            
            // Google Apps Script の Web アプリ URL が設定されているか確認
            if (!GOOGLE_APPS_SCRIPT_URL) {
                alert('送信先のURLが設定されていません。');
                console.error('GOOGLE_APPS_SCRIPT_URL is not set.');
                return; // URLがなければ処理を中断
            }
            
            try {
                // 直接 Google Apps Script の Web アプリにデータを POST 送信
                const response = await fetch(GOOGLE_APPS_SCRIPT_URL, {
                    method: 'POST',
                    // mode: 'no-cors', // GAS側でCORS設定が難しい場合の回避策だが、レスポンスは受け取れない
                    headers: {
                        // 'Content-Type': 'application/json', // GAS側が application/json を受け付ける場合
                        'Content-Type': 'text/plain;charset=utf-8', // GAS doPost(e) で e.postData.contents を使う場合 text/plain が扱いやすいことがある
                    },
                    body: JSON.stringify(payload) // GAS側で JSON.parse(e.postData.contents) する想定
                });
                
                // GASからのレスポンスを処理 (GASがJSONを返す想定)
                // 注意: 'no-cors' モードでは response.ok や response.json() は機能しません。
                //       GAS側で適切にCORSヘッダーを設定する必要があります。
                //       もしCORSエラーが出る場合は、GAS側のdoPost関数で ContentService を使って
                //       適切なヘッダーを返すように修正してください。
                if (response.ok) { // レスポンスが正常 (200-299) かどうか
                    // const result = await response.json(); // GASがJSONを返す場合
                    // console.log('GAS Response:', result); // GASからの応答をログに出力
                    
                    // 送信成功メッセージを表示
                    messageForm.style.display = 'none';
                    thankYouMessage.style.display = 'block';
                    
                } else {
                    // サーバー側 (GAS) でエラーが発生した場合
                    console.error('GAS request failed:', response.status, response.statusText);
                    // const errorData = await response.text(); // エラー内容をテキストで取得試行
                    alert(`メッセージの送信に失敗しました。ステータス: ${response.status}`);
                }
            } catch (error) {
                console.error('送信中にエラーが発生しました:', error);
                alert('エラーが発生しました。ネットワーク接続を確認するか、もう一度お試しください。');
            }
        });
    };
</script>
