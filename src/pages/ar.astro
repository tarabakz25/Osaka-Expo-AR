---
import ARLayout from '../layouts/ARLayout.astro';
import Fukidashi from '/Fukidashi.glb?url';
import { projects } from '../data/projects.js';
---

<ARLayout>    
    <script is:inline src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <script is:inline>
        // 水の粒子アニメーションを実装するためのコンポーネント
        AFRAME.registerComponent('water-particles', {
            init: function() {
                this.particles = [];
                this.scene = this.el.sceneEl.object3D;
                
                // マーカーが検出されたら粒子を非表示にする
                const nftMarker = document.querySelector('a-nft');
                nftMarker.addEventListener('markerFound', () => {
                    this.hideParticles();
                });
                
                // マーカーが見失われたら粒子を再表示
                nftMarker.addEventListener('markerLost', () => {
                    this.showParticles();
                });
                
                // 初期パーティクルを生成
                this.createInitialParticles();
                
                // アニメーションループを開始
                this.animate = this.animate.bind(this);
                this.lastParticleTime = Date.now();
                this.animate();
            },
            
            createInitialParticles: function() {
                // 初期パーティクルは空間全体に分布させる
                for (let i = 0; i < 300; i++) {
                    // 特別なフラグを渡して、Y座標を全体に分散させる
                    this.createParticle(true);
                }
            },
            
            createParticle: function(isInitial = false) {
                // ランダムなサイズの三角錐を生成（小〜大）
                const size = 0.1 + Math.random() * 0.25;
                const height = size * 4;
                
                const geometry = new THREE.ConeGeometry(size, height, 4);
                
                const color = 0x0066cc;
                
                // 透明度もランダムに（ターゲット透明度として保存）
                const targetOpacity = 0.5 + Math.random() * 0.5;
                
                // 最初は完全に透明で開始
                const material = new THREE.MeshBasicMaterial({ 
                    color: color, 
                    transparent: true, 
                    opacity: 0 // 最初は透明
                });
                
                const particle = new THREE.Mesh(geometry, material);
                
                // カメラ近くは避け、より広範囲に粒子を配置
                const angle = Math.random() * Math.PI * 2; // 0〜360度のランダムな角度
                
                // カメラから3〜15の距離に配置（近すぎる場所は避ける）
                const radius = 10 + Math.random() * 50; 
                
                particle.position.x = Math.cos(angle) * radius;
                particle.position.z = Math.sin(angle) * radius;
                
                // Y座標の設定
                if (isInitial) {
                    // 初期パーティクルは空間全体に分布（-10〜15の範囲）
                    particle.position.y = -10 + Math.random() * 25;
                } else {
                    // 通常の新規パーティクルは下から出現
                    particle.position.y = -10 - Math.random() * 5;
                }
                
                // 上を向くように回転を設定
                particle.rotation.y = -Math.PI / 2;
                
                // 上昇速度をサイズに応じて調整（大きいほど遅く）
                particle.userData.speed = 0.01 + (0.02 * (1 - (size / 0.3)));
                
                // Y軸周りの回転速度をランダムに設定
                particle.userData.rotationSpeed = 0.005 + Math.random() * 0.015;
                
                // フェードイン速度を設定
                particle.userData.fadeInSpeed = 0.01 + Math.random() * 0.01;
                particle.userData.targetOpacity = targetOpacity;
                
                // 生存時間をランダムに設定（より長く）
                particle.userData.lifeTime = Date.now() + 15000;
                
                this.scene.add(particle);
                this.particles.push(particle);
                
                return particle;
            },
            
            animate: function() {
                requestAnimationFrame(this.animate);
                
                const now = Date.now();
                const expiredParticles = [];
                
                // 各粒子を上に移動
                this.particles.forEach((particle, index) => {
                    particle.position.y += particle.userData.speed;
                    
                    // Y軸周りの回転
                    particle.rotateOnAxis(new THREE.Vector3(0, 1, 0), particle.userData.rotationSpeed);
                    
                    // フェードイン効果
                    if (particle.material.opacity < particle.userData.targetOpacity) {
                        particle.material.opacity += particle.userData.fadeInSpeed;
                        if (particle.material.opacity > particle.userData.targetOpacity) {
                            particle.material.opacity = particle.userData.targetOpacity;
                        }
                    }
                    
                    // 生存期間が終了したパーティクルを記録
                    if (particle.userData.lifeTime < now || particle.position.y > 30) {
                        expiredParticles.push(index);
                    }
                });
                
                // 期限切れのパーティクルを削除（後ろから削除して配列の整合性を保つ）
                for (let i = expiredParticles.length - 1; i >= 0; i--) {
                    const index = expiredParticles[i];
                    const particle = this.particles[index];
                    this.scene.remove(particle);
                    particle.geometry.dispose();
                    particle.material.dispose();
                    this.particles.splice(index, 1);
                }
                
                // 定期的に新しいパーティクルを追加（もう少し頻度を上げる）
                if (now - this.lastParticleTime > 80) { // 80ミリ秒ごとに追加
                    // 一度に2つ追加して広範囲感を強化
                    this.createParticle();
                    this.createParticle();
                    this.lastParticleTime = now;
                }
            },
            
            hideParticles: function() {
                this.particles.forEach(particle => {
                    particle.visible = false;
                });
            },
            
            showParticles: function() {
                this.particles.forEach(particle => {
                    particle.visible = true;
                });
            }
        });
    </script>
    <div id="arjsContent">
        <div id="arjs-scene">
            <a-scene
                vr-mode-ui="enabled: false;"
                renderer="logarithmicDepthBuffer: true; precision: medium;"
                embedded
                arjs="trackingMethod: best; sourceType: webcam; debugUIEnabled: false;">
                
                <!-- 水の粒子エフェクトを追加 -->
                <a-entity water-particles></a-entity>
                
                <!-- マーカーが検出された位置に固定表示するためのエンティティ -->
                <a-entity id="fixed-content" visible="false">
                    <!-- マーカーが検出されたら表示されるコンテンツ -->
                    <a-entity
                        id="fukidashiModel"
                        gltf-model={Fukidashi}
                        scale="5 5 5"
                        position="0 0 0"
                        rotation="0 0 0">
                    </a-entity>
                    
                    <!-- テキスト表示用エンティティ -->
                    <a-entity
                        id="projectText"
                        position="0 1 0"
                        text="value: Loading...; align: center; width: 2; color: black;">
                    </a-entity>
                    
                    <!-- 動画表示用エンティティ -->
                    <a-video
                        id="projectVideo"
                        width="3"
                        height="1.5"
                        position="0 3 0"
                        visible="false">
                    </a-video>
                </a-entity>
                
                <!-- カメラとマーカー設定 -->
                <a-nft
                    type="nft"
                    url="/nft/marker"
                    smooth="true"
                    smoothCount="10"
                    smoothTolerance=".01"
                    smoothThreshold="5">
                </a-nft>
                
                <!-- カメラ -->
                <a-entity camera></a-entity>
            </a-scene>
        </div>
    </div>
</ARLayout>

<script define:vars={{ projects }}>
    // セッションストレージから選択されたプロジェクトを取得
    document.addEventListener('DOMContentLoaded', () => {
        const selectedProjectIndex = sessionStorage.getItem('selectedProject');
        
        if (selectedProjectIndex !== null && projects[selectedProjectIndex]) {
            const project = projects[selectedProjectIndex];
            console.log('選択されたプロジェクト:', project);
            
            // プロジェクトディレクトリからテキストを取得
            fetch(`/items/${project.dir}/text.txt`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`テキストファイルの取得に失敗: ${response.status}`);
                    }
                    return response.text();
                })
                .then(text => {
                    console.log('テキスト内容:', text);
                    
                    // ARマーカーが読み込まれたときの処理
                    const nftMarker = document.querySelector('a-nft');
                    const loadingMessage = document.getElementById('loadingMessage');
                    const projectText = document.getElementById('projectText');
                    const projectVideo = document.getElementById('projectVideo');
                    
                    // テキストと動画ファイル名を分離（もし含まれている場合）
                    let textContent = text;
                    let videoFileName = null;
                    
                    // テキストに動画ファイル名が含まれているか確認
                    const parts = text.split(' - ');
                    if (parts.length > 1) {
                        textContent = parts[0];
                        videoFileName = parts[1].trim();
                    }
                    
                    nftMarker.addEventListener('markerFound', () => {
                        console.log('NFTマーカーが検出されました');
                        loadingMessage.style.display = 'none';
                        
                        // マーカーの位置と回転を取得
                        const markerPosition = nftMarker.object3D.position.clone();
                        const markerRotation = nftMarker.object3D.rotation.clone();
                        
                        // 固定コンテンツエンティティを取得
                        const fixedContent = document.getElementById('fixed-content');
                        
                        // まだ位置固定されていない場合のみ、位置と回転をセット
                        if (fixedContent.getAttribute('visible') !== 'true') {
                            // 固定コンテンツをマーカーの位置に配置
                            fixedContent.setAttribute('position', markerPosition);
                            fixedContent.setAttribute('rotation', markerRotation);
                            fixedContent.setAttribute('visible', 'true');
                            
                            // テキストを更新
                            projectText.setAttribute('text', `value: ${textContent}; align: center; width: 2; color: black;`);
                            
                            // 動画が指定されている場合は表示
                            if (videoFileName) {
                                const videoPath = `/items/${project.dir}/${videoFileName}`;
                                console.log('動画パス:', videoPath);
                                
                                projectVideo.setAttribute('src', videoPath);
                                projectVideo.setAttribute('visible', 'true');
                                
                                // 動画の読み込みと再生
                                const videoEl = projectVideo.components.material.material.map.image;
                                if (videoEl) {
                                    videoEl.play().catch(e => console.error('動画再生エラー:', e));
                                }
                            }
                        }
                    });
                    
                    nftMarker.addEventListener('markerLost', () => {
                        console.log('NFTマーカーを見失いました');
                        loadingMessage.style.display = 'block';
                        
                        // 固定コンテンツは非表示にせず、位置固定のままにする
                        // 動画も停止せずにそのまま再生を続ける
                    });
                })
                .catch(error => {
                    console.error('プロジェクトデータの取得に失敗しました:', error);
                });
        } else {
            console.error('選択されたプロジェクトが見つかりません');
        }
    });
</script>

<style>
    #arjsContent {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10;
    }
    
    #loadingMessage {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 1em;
        border-radius: 0.5em;
        text-align: center;
        font-size: 1.2em;
    }
    
    #backButton {
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 0.5em 1em;
        border-radius: 0.5em;
        text-decoration: none;
        font-size: 1em;
    }
    
    #arjs-scene {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
    }
</style>