---
import { Image } from "astro:assets"
import ARLayout from '../layouts/ARLayout.astro';
import Fukidashi from '/Fukidashi.glb?url';
import MarkerAnnounce from '../assets/marker-announce.svg';
import { projects } from '../data/projects.js';
---

<ARLayout>    
    <script is:inline src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <div id="arjsContent">
        <!-- マーカー読み取り案内 -->
        <div class="marker-image">
            <Image src={MarkerAnnounce} alt="マーカー読み取り案内" width={250} height={250} />
        </div>
    
        <!-- デバッグ情報表示エリア -->
        <!-- <div id="debugInfo" style="position: fixed; top: 10px; left: 10px; background-color: rgba(0,0,0,0.7); color: white; padding: 10px; z-index: 9999; border-radius: 5px; width: 80%; max-width: 300px;">
            <h3 style="margin: 0 0 5px 0; font-size: 14px;">デバッグ情報</h3>
            <div>マーカー状態: <span id="markerStatus">未検出</span></div>
            <div>現在のプロジェクト: <span id="currentProject">なし</span></div>
            <div>テキスト読込: <span id="textLoadStatus">未読込</span></div>
            <div>動画読込: <span id="videoLoadStatus">未読込</span></div>
            <div id="errorMessage" style="color: #ff6b6b;"></div>
        </div> -->
        
        <!-- 動画再生後のお礼メッセージ -->
        <div id="thankYouContainer" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 30; background-color: rgba(0, 0, 0, 0.8); color: white; padding: 2em; border-radius: 1em; text-align: center; max-width: 80%;">
            <h2>ご視聴ありがとうございました！</h2>
            <p>学生の作品はいかがでしたか？</p>
            <p>良ければ、学生へのメッセージをお願いします。</p>
            <a href="/message" id="messageButton" style="display: inline-block; margin-top: 1em; background-color: #4caf50; color: white; padding: 0.75rem 1.5rem; border-radius: 2rem; text-decoration: none; font-size: 1rem;">メッセージを送る</a>
        </div>
        
        <div id="arjs-scene">
            <a-scene
                vr-mode-ui="enabled: false;"
                renderer="logarithmicDepthBuffer: true; precision: medium;"
                embedded
                arjs="trackingMethod: best; sourceType: webcam; debugUIEnabled: false;">
                
                <!-- assets部分をa-sceneの中に移動 -->
                
                <!-- 水の粒子エフェクトを追加 -->
                <a-entity water-particles></a-entity>
                
                <!-- マーカーが検出された位置に固定表示するためのエンティティを追加 -->
                <a-entity id="fixed-content" visible="false"></a-entity>
    
                <a-marker type="pattern" url='pattern.patt' id="patternMarker">
                    <!-- マーカー上に直接コンテンツを配置 -->
                        <!-- <a-entity
                            id="fukidashiModel"
                            gltf-model={Fukidashi}
                            scale="0.5 0.5 1"
                            position="0 0 0"
                            rotation="180 90 -90"
                            visible="true">
                        </a-entity> -->
                        <a-entity
                            id="projectText"
                            scale="1 1 1"
                            position="3 -3 0"
                            text="value: テスト表示; align: center; width: 2; color: black;"
                            visible="true">
                        </a-entity>
                        <a-video
                            id="projectVideo"
                            width="4"
                            height="1"
                            position="0 0 0"
                            rotation="-45 0 0"
                            src="#movieAsset"
                            autoplay
                            playsinline>
                        </a-video>
                </a-marker>
                <!-- カメラ -->
                <a-entity camera></a-entity>
            </a-scene>
        </div>
    </div>
</ARLayout>

<script define:vars={{ projects }}>
    // DOMが読み込まれたら実行
    document.addEventListener('DOMContentLoaded', () => {
        // a-nftではなくa-markerを取得するように修正
        const marker = document.querySelector('#patternMarker');
        console.log('マーカー要素検索結果:', marker);
        const loadingMessage = document.getElementById('loadingMessage');
        const projectText = document.getElementById('projectText');
        const projectVideo = document.getElementById('projectVideo');
        const thankYouContainer = document.getElementById('thankYouContainer');
        
        // デバッグ情報表示用要素 - nullチェックを追加
        const markerStatus = document.getElementById('markerStatus');
        const currentProject = document.getElementById('currentProject');
        const textLoadStatus = document.getElementById('textLoadStatus');
        const videoLoadStatus = document.getElementById('videoLoadStatus');
        const errorMessage = document.getElementById('errorMessage');
        
        // セッションストレージから選択されたプロジェクトを取得
        const selectedProjectIndex = sessionStorage.getItem('selectedProject');
        
        // デバッグ情報：プロジェクト情報を表示
        if (selectedProjectIndex !== null && projects[selectedProjectIndex]) {
            const selectedProject = projects[selectedProjectIndex];
            currentProject.innerHTML = `選択: ${selectedProject.name}`;
        } else {
            currentProject.innerHTML = `エラー: プロジェクトが選択されていません`;
            errorMessage.textContent = '先に選択画面でプロジェクトを選んでください';
        }
        
        // 動画再生完了フラグ
        let videoCompleted = false;
        
        // マーカーが存在する場合のみイベントリスナーを追加
        if (marker) {
            // マーカーが検出されたときの処理
            marker.addEventListener('markerFound', () => {
                console.log('マーカーが検出されました:', marker.id);
                console.log('マーカータイプ:', marker.getAttribute('type'));
                if (markerStatus) markerStatus.textContent = '検出中';
                if (markerStatus) markerStatus.style.color = '#66ff66';
                if (loadingMessage) loadingMessage.style.display = 'none';
                
                // 既に動画再生が完了していたらお礼メッセージを表示
                if (videoCompleted) {
                    thankYouContainer.style.display = 'block';
                    return;
                }
                
                // マーカー検出デバッグ情報を追加
                errorMessage.textContent = 'マーカーを検出しました。マーカー上に直接表示します...';
                errorMessage.style.color = '#66ff66';
                
                // 選択されたプロジェクトがない場合は処理を中止
                if (selectedProjectIndex === null || !projects[selectedProjectIndex]) {
                    errorMessage.textContent = 'プロジェクトが選択されていません';
                    return;
                }
                
                const project = projects[selectedProjectIndex];
                console.log('表示プロジェクト:', project);
                currentProject.textContent = `${project.name}`;
                
                // markerContentの条件をなくし、直接projectTextを更新
                const projectTextEl = document.getElementById('projectText');
                if (projectTextEl) {
                    // 選択されたプロジェクトのテキストを表示するよう更新
                    projectTextEl.setAttribute('text', `value: ${project.name} - ${project.keyword}; align: center; width: 2; color: black;`);
                    projectTextEl.setAttribute('visible', 'true');
                }
                
                // 動画要素を取得
                const movieAsset = document.getElementById('movieAsset');
                if (movieAsset) {
                    // 動画パスを更新
                    const videoPath = `/items/${project.dir}/movie.mp4`;
                    console.log('動画パスを設定:', videoPath);
                    if (videoLoadStatus) videoLoadStatus.textContent = '読込開始...';
                    
                    // 既存の属性を設定
                    movieAsset.src = videoPath;
                    movieAsset.muted = true; // 重要: 自動再生にはミュートが必要
                    movieAsset.setAttribute('playsinline', '');
                    movieAsset.setAttribute('crossorigin', 'anonymous');
                    
                    // 動画をロード
                    movieAsset.load();
                    
                    // ユーザーインタラクションに応じて再生（例：画面タップ）
                    document.body.addEventListener('click', function playVideo() {
                        movieAsset.play().then(() => {
                            console.log('動画再生成功');
                            if (videoLoadStatus) videoLoadStatus.textContent = '再生中';
                            // イベントリスナーを削除（一度だけ実行）
                            document.body.removeEventListener('click', playVideo);
                        }).catch(e => {
                            console.error('動画再生エラー:', e);
                            errorMessage.textContent = `動画エラー: ${e.message}`;
                        });
                    }, { once: true });
                    
                    // 動画終了イベント
                    movieAsset.onended = () => {
                        console.log('動画再生が完了しました');
                        videoCompleted = true;
                        
                        // お礼メッセージを表示
                        thankYouContainer.style.display = 'block';
                        
                        // 選択されたプロジェクトIDをメッセージページ用に保存
                        if (selectedProjectIndex !== null) {
                            sessionStorage.setItem('messageProject', selectedProjectIndex);
                        }
                    };
                }
            });
            
            // マーカーを見失ったときの処理
            marker.addEventListener('markerLost', () => {
                console.log('マーカーを見失いました');
                if (markerStatus) markerStatus.textContent = '未検出';
                if (markerStatus) markerStatus.style.color = '#ffff66';
                
                // 動画再生完了後は、loadingMessageを表示しない
                if (!videoCompleted) {
                    loadingMessage.style.display = 'block';
                    errorMessage.textContent = 'マーカーを見失いました。再度マーカーを探してください。';
                }
            });
        } else {
            console.error('マーカー要素が見つかりませんでした');
        }
    });
</script>

<style>
    #arjsContent {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10;
    }
    
    #loadingMessage {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 1em;
        border-radius: 0.5em;
        text-align: center;
        font-size: 1.2em;
    }
    
    #backButton {
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 0.5em 1em;
        border-radius: 0.5em;
        text-decoration: none;
        font-size: 1em;
    }
    
    #arjs-scene {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
    }
    
    #messageButton {
        display: inline-block;
        background-color: #4caf50;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 2rem;
        text-decoration: none;
        font-size: 1rem;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
    }
    
    #messageButton:hover {
        background-color: #3d9140;
        transform: translateY(-2px);
    }
    
    .marker-image {
        position: fixed;
        top: 70%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 250px;
        height: 250px;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 20;
    }
    
    .marker-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }
</style>