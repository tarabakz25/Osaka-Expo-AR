---
import ARLayout from '../layouts/ARLayout.astro';
import Fukidashi from '/Fukidashi.glb?url';
import { projects } from '../data/projects.js';
---

<ARLayout>    
    <script is:inline src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
    <script is:inline>
        // 水の粒子アニメーションを実装するためのコンポーネント
        AFRAME.registerComponent('water-particles', {
            init: function() {
                this.particles = [];
                this.scene = this.el.sceneEl.object3D;
                
                // マーカーが検出されたら粒子を非表示にする
                const marker = document.querySelector('a-nft');
                marker.addEventListener('markerFound', () => {
                    this.hideParticles();
                });
                
                // マーカーが見失われたら粒子を再表示
                marker.addEventListener('markerLost', () => {
                    this.showParticles();
                });
                
                // 初期パーティクルを生成
                this.createInitialParticles();
                
                // アニメーションループを開始
                this.animate = this.animate.bind(this);
                this.lastParticleTime = Date.now();
                this.animate();
            },
            
            createInitialParticles: function() {
                // 初期パーティクルは空間全体に分布させる
                for (let i = 0; i < 300; i++) {
                    // 特別なフラグを渡して、Y座標を全体に分散させる
                    this.createParticle(true);
                }
            },
            
            createParticle: function(isInitial = false) {
                // ランダムなサイズの三角錐を生成（小〜大）
                const size = 0.1 + Math.random() * 0.25;
                const height = size * 4;
                
                const geometry = new THREE.ConeGeometry(size, height, 4);
                
                const color = 0x0066cc;
                
                // 透明度もランダムに（ターゲット透明度として保存）
                const targetOpacity = 0.5 + Math.random() * 0.5;
                
                // 最初は完全に透明で開始
                const material = new THREE.MeshBasicMaterial({ 
                    color: color, 
                    transparent: true, 
                    opacity: 0 // 最初は透明
                });
                
                const particle = new THREE.Mesh(geometry, material);
                
                // カメラ近くは避け、より広範囲に粒子を配置
                const angle = Math.random() * Math.PI * 2; // 0〜360度のランダムな角度
                
                // カメラから3〜15の距離に配置（近すぎる場所は避ける）
                const radius = 10 + Math.random() * 50; 
                
                particle.position.x = Math.cos(angle) * radius;
                particle.position.z = Math.sin(angle) * radius;
                
                // Y座標の設定
                if (isInitial) {
                    // 初期パーティクルは空間全体に分布（-10〜15の範囲）
                    particle.position.y = -10 + Math.random() * 25;
                } else {
                    // 通常の新規パーティクルは下から出現
                    particle.position.y = -10 - Math.random() * 5;
                }
                
                // 上を向くように回転を設定
                particle.rotation.y = -Math.PI / 2;
                
                // 上昇速度をサイズに応じて調整（大きいほど遅く）
                particle.userData.speed = 0.01 + (0.02 * (1 - (size / 0.3)));
                
                // Y軸周りの回転速度をランダムに設定
                particle.userData.rotationSpeed = 0.005 + Math.random() * 0.015;
                
                // フェードイン速度を設定
                particle.userData.fadeInSpeed = 0.01 + Math.random() * 0.01;
                particle.userData.targetOpacity = targetOpacity;
                
                // 生存時間をランダムに設定（より長く）
                particle.userData.lifeTime = Date.now() + 15000;
                
                this.scene.add(particle);
                this.particles.push(particle);
                
                return particle;
            },
            
            animate: function() {
                requestAnimationFrame(this.animate);
                
                const now = Date.now();
                const expiredParticles = [];
                
                // 各粒子を上に移動
                this.particles.forEach((particle, index) => {
                    particle.position.y += particle.userData.speed;
                    
                    // Y軸周りの回転
                    particle.rotateOnAxis(new THREE.Vector3(0, 1, 0), particle.userData.rotationSpeed);
                    
                    // フェードイン効果
                    if (particle.material.opacity < particle.userData.targetOpacity) {
                        particle.material.opacity += particle.userData.fadeInSpeed;
                        if (particle.material.opacity > particle.userData.targetOpacity) {
                            particle.material.opacity = particle.userData.targetOpacity;
                        }
                    }
                    
                    // 生存期間が終了したパーティクルを記録
                    if (particle.userData.lifeTime < now || particle.position.y > 30) {
                        expiredParticles.push(index);
                    }
                });
                
                // 期限切れのパーティクルを削除（後ろから削除して配列の整合性を保つ）
                for (let i = expiredParticles.length - 1; i >= 0; i--) {
                    const index = expiredParticles[i];
                    const particle = this.particles[index];
                    this.scene.remove(particle);
                    particle.geometry.dispose();
                    particle.material.dispose();
                    this.particles.splice(index, 1);
                }
                
                // 定期的に新しいパーティクルを追加（もう少し頻度を上げる）
                if (now - this.lastParticleTime > 80) { // 80ミリ秒ごとに追加
                    // 一度に2つ追加して広範囲感を強化
                    this.createParticle();
                    this.createParticle();
                    this.lastParticleTime = now;
                }
            },
            
            hideParticles: function() {
                this.particles.forEach(particle => {
                    particle.visible = false;
                });
            },
            
            showParticles: function() {
                this.particles.forEach(particle => {
                    particle.visible = true;
                });
            }
        });
    </script>
    <div id="arjsContent">
        <!-- マーカー検出状態を表示するメッセージ -->
        <div id="loadingMessage">マーカーを探しています...</div>
        
        <!-- デバッグ情報表示エリア -->
        <div id="debugInfo" style="position: fixed; top: 10px; left: 10px; background-color: rgba(0,0,0,0.7); color: white; padding: 10px; z-index: 9999; border-radius: 5px; width: 80%; max-width: 300px;">
            <h3 style="margin: 0 0 5px 0; font-size: 14px;">デバッグ情報</h3>
            <div>マーカー状態: <span id="markerStatus">未検出</span></div>
            <div>現在のプロジェクト: <span id="currentProject">なし</span></div>
            <div>テキスト読込: <span id="textLoadStatus">未読込</span></div>
            <div>動画読込: <span id="videoLoadStatus">未読込</span></div>
            <div id="errorMessage" style="color: #ff6b6b;"></div>
        </div>
        
        <!-- 動画再生後のお礼メッセージ -->
        <div id="thankYouContainer" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 30; background-color: rgba(0, 0, 0, 0.8); color: white; padding: 2em; border-radius: 1em; text-align: center; max-width: 80%;">
            <h2>ご視聴ありがとうございました！</h2>
            <p>学生の作品はいかがでしたか？</p>
            <p>良ければ、学生へのメッセージをお願いします。</p>
            <a href="/message" id="messageButton" style="display: inline-block; margin-top: 1em; background-color: #4caf50; color: white; padding: 0.75rem 1.5rem; border-radius: 2rem; text-decoration: none; font-size: 1rem;">メッセージを送る</a>
        </div>
        
        <div id="arjs-scene">
            <a-scene
                vr-mode-ui="enabled: false;"
                renderer="logarithmicDepthBuffer: true; precision: medium;"
                embedded
                arjs="trackingMethod: best; sourceType: webcam; debugUIEnabled: false;">
                
                <!-- 水の粒子エフェクトを追加 -->
                <a-entity water-particles></a-entity>
                
                <!-- マーカーが検出された位置に固定表示するためのエンティティを追加 -->
                <a-entity id="fixed-content" visible="false"></a-entity>
    
                <a-nft
                    id="projectVideo"
                    type="nft"
                    url="nft/marker"
                    smooth="true"
                    smoothCount="10"
                    smoothTolerance=".01"
                    smoothThreshold="5">
                    <!-- マーカー上に直接コンテンツを配置 -->
                        <a-entity
                            id="fukidashiModel"
                            gltf-model={Fukidashi}
                            scale="1 1 2"
                            position="3 -4 0"
                            rotation="180 90 -90"
                            visible="true">
                        </a-entity>
                        <a-entity
                            id="projectText"
                            scale="1 1 1"
                            position="3 -3 0"
                            text="value: テスト表示; align: center; width: 2; color: black;"
                            visible="true">
                        </a-entity>
                            <a-video
                                width="7"
                                height="2"
                                autoplay
                                muted
                                playsinline>
                            </a-video>
                        </a-nft>
                </a-nft>
                <!-- カメラ -->
                <a-entity camera></a-entity>
            </a-scene>
        </div>
    </div>
</ARLayout>

<script define:vars={{ projects }}>
    // DOMが読み込まれたら実行
    document.addEventListener('DOMContentLoaded', () => {
        // ARマーカー関連の要素を取得
        const marker = document.querySelector('a-nft');
        const loadingMessage = document.getElementById('loadingMessage');
        const projectText = document.getElementById('projectText');
        const projectVideo = document.getElementById('projectVideo');
        const thankYouContainer = document.getElementById('thankYouContainer');
        // 固定コンテンツの参照を無効化
        // const fixedContent = document.getElementById('fixed-content');
        
        // デバッグ情報表示用要素
        const markerStatus = document.getElementById('markerStatus');
        const currentProject = document.getElementById('currentProject');
        const textLoadStatus = document.getElementById('textLoadStatus');
        const videoLoadStatus = document.getElementById('videoLoadStatus');
        const errorMessage = document.getElementById('errorMessage');
        
        // セッションストレージから選択されたプロジェクトを取得
        const selectedProjectIndex = sessionStorage.getItem('selectedProject');
        
        // デバッグ情報：プロジェクト情報を表示
        if (selectedProjectIndex !== null && projects[selectedProjectIndex]) {
            const selectedProject = projects[selectedProjectIndex];
            currentProject.innerHTML = `選択: ${selectedProject.name}`;
        } else {
            currentProject.innerHTML = `エラー: プロジェクトが選択されていません`;
            errorMessage.textContent = '先に選択画面でプロジェクトを選んでください';
        }
        
        // 動画再生完了フラグ
        let videoCompleted = false;
        
        // マーカーが検出されたときの処理
        marker.addEventListener('markerFound', () => {
            console.log('NFTマーカーが検出されました');
            markerStatus.textContent = '検出中';
            markerStatus.style.color = '#66ff66';
            loadingMessage.style.display = 'none';
            
            // 既に動画再生が完了していたらお礼メッセージを表示
            if (videoCompleted) {
                thankYouContainer.style.display = 'block';
                return;
            }
            
            // マーカー検出デバッグ情報を追加
            errorMessage.textContent = 'マーカーを検出しました。マーカー上に直接表示します...';
            errorMessage.style.color = '#66ff66';
            
            // 選択されたプロジェクトがない場合は処理を中止
            if (selectedProjectIndex === null || !projects[selectedProjectIndex]) {
                errorMessage.textContent = 'プロジェクトが選択されていません';
                return;
            }
            
            const project = projects[selectedProjectIndex];
            console.log('表示プロジェクト:', project);
            currentProject.textContent = `${project.name}`;
            
            // markerContentの条件をなくし、直接projectTextを更新
            const projectTextEl = document.getElementById('projectText');
            if (projectTextEl) {
                // 選択されたプロジェクトのテキストを表示するよう更新
                projectTextEl.setAttribute('text', `value: ${project.name} - ${project.keyword}; align: center; width: 2; color: black;`);
                projectTextEl.setAttribute('visible', 'true');
            }
            
            // 動画のパスを設定
            const videoPath = `/items/${project.dir}/movie.mp4`;
            console.log('動画パス:', videoPath);
            
            // プロジェクトビデオ要素を取得
            const projectVideo = document.getElementById('projectVideo');
            if (projectVideo) {
                projectVideo.setAttribute('src', videoPath);
                projectVideo.setAttribute('muted', 'true');
                projectVideo.setAttribute('autoplay', 'true');
                projectVideo.setAttribute('playsinline', '');
                projectVideo.setAttribute('visible', 'true');
                
                // 明示的に再生を試みる
                setTimeout(() => {
                    try {
                        const videoEl = projectVideo.components.material.material.map.image;
                        if (videoEl) {
                            videoEl.muted = true;
                            
                            // 動画再生終了イベントを追加
                            videoEl.addEventListener('ended', () => {
                                console.log('動画再生が完了しました');
                                videoCompleted = true;
                                
                                // お礼メッセージを表示
                                thankYouContainer.style.display = 'block';
                                
                                // 選択されたプロジェクトIDをメッセージページ用に保存
                                if (selectedProjectIndex !== null) {
                                    sessionStorage.setItem('messageProject', selectedProjectIndex);
                                }
                            });
                            
                            videoEl.play().catch(e => {
                                console.error('動画再生エラー:', e);
                                errorMessage.textContent = `動画エラー: ${e.message}`;
                            });
                        }
                    } catch (e) {
                        console.error('動画処理エラー:', e);
                        errorMessage.textContent = `処理エラー: ${e.message}`;
                    }
                }, 1000);
            }
        });
        
        // マーカーを見失ったときの処理
        marker.addEventListener('markerLost', () => {
            console.log('NFTマーカーを見失いました');
            markerStatus.textContent = '未検出';
            markerStatus.style.color = '#ffff66';
            
            // 動画再生完了後は、loadingMessageを表示しない
            if (!videoCompleted) {
                loadingMessage.style.display = 'block';
                errorMessage.textContent = 'マーカーを見失いました。再度マーカーを探してください。';
            }
        });
    });
</script>

<style>
    #arjsContent {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10;
    }
    
    #loadingMessage {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 1em;
        border-radius: 0.5em;
        text-align: center;
        font-size: 1.2em;
    }
    
    #backButton {
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 0.5em 1em;
        border-radius: 0.5em;
        text-decoration: none;
        font-size: 1em;
    }
    
    #arjs-scene {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
    }
    
    #messageButton {
        display: inline-block;
        background-color: #4caf50;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 2rem;
        text-decoration: none;
        font-size: 1rem;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
    }
    
    #messageButton:hover {
        background-color: #3d9140;
        transform: translateY(-2px);
    }
</style>