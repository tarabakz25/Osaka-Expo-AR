---
import { Image } from "astro:assets"
import ARLayout from '../layouts/ARLayout.astro';
import MarkerAnnounce from '../assets/marker-announce.svg';
import { projects } from '../data/projects.js';
import '../styles/ar.css';
---

<ARLayout>    
    <script is:inline src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <div id="arjsContent">
        <!-- ★ 開始を促すオーバーレイを追加 -->
        <div id="startOverlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); color: white; display: flex; justify-content: center; align-items: center; z-index: 100; text-align: center; flex-direction: column; font-size: 1.2em; cursor: pointer;">
            <p>AR体験を開始するには</p>
            <p>画面をタップしてください</p>
            <p style="font-size: 0.8em; margin-top: 2em;">(タップ後にカメラへのアクセス許可を求められます)</p>
        </div>
        <!-- マーカー読み取り案内 -->
        <div class="marker-image">
            <Image src={MarkerAnnounce} alt="マーカー読み取り案内" width={250} height={250} />
        </div>
    
        <!-- デバッグ情報表示エリア -->
        <!-- <div id="debugInfo" style="position: fixed; top: 10px; left: 10px; background-color: rgba(0,0,0,0.7); color: white; padding: 10px; z-index: 9999; border-radius: 5px; width: 80%; max-width: 300px;">
            <h3 style="margin: 0 0 5px 0; font-size: 14px;">デバッグ情報</h3>
            <div>マーカー状態: <span id="markerStatus">未検出</span></div>
            <div>現在のプロジェクト: <span id="currentProject">なし</span></div>
            <div>テキスト読込: <span id="textLoadStatus">未読込</span></div>
            <div>動画読込: <span id="videoLoadStatus">未読込</span></div>
            <div id="errorMessage" style="color: #ff6b6b;"></div>
        </div> -->
        
        <!-- 動画再生後のお礼メッセージ -->
        <div id="thankYouContainer">
            <h2>ご視聴ありがとうございました！</h2>
            <p>学生の作品はいかがでしたか？</p>
            <p>良ければ、学生へのメッセージをお願いします。</p>
            <div class="project-selection">
                <p>他の作品も見てみませんか？</p>
                <select id="projectSelector">
                    {projects.map((project, index) => (
                        <option value={index}>{project.name} - {project.keyword}</option>
                    ))}
                </select>
                <button id="watchAgainButton">見る</button>
            </div>
            <a href="/message" id="messageButton">メッセージを送る</a>
        </div>
        
        <div id="arjs-scene">
            <a-scene
                vr-mode-ui="enabled: false;"
                renderer="logarithmicDepthBuffer: true; precision: medium;"
                embedded
                arjs="trackingMethod: best; sourceType: webcam;">
                
                <!-- アセット管理システム -->
                <a-assets>
                    <video id="projectVideo" src="" loop="false" playsinline></video>
                    <a-asset-item id="mizutamaModel" src="/mizutama_anim.glb"></a-asset-item>
                </a-assets>

                <a-entity
                    id="mizutamaEntity"
                    gltf-model="#mizutamaModel"
                    scale="1 1 1"
                    position="0 0 0"
                    rotation="0 0 0"
                    visible="true">
                </a-entity>
                
                <a-marker type="pattern" url='/pattern-test.patt' id="patternMarker">
                    <a-entity
                        id="projectText"
                        scale="2 2 2"
                        position="0 0 0"
                        text="value: テスト表示; align: center; width: 2; color: black;"
                        visible="true">
                    </a-entity>
                    <a-video
                        id="projectVideoEntity"
                        width="6"
                        height="2"
                        position="0 0 0"
                        rotation="-45 0 0"
                        src="#projectVideo"
                        visible="false"
                        playsinline>
                    </a-video>
                </a-marker>
                <!-- カメラ -->
                <a-entity camera></a-entity>
            </a-scene>
        </div>
    </div>
</ARLayout>

<script define:vars={{ projects }}>
    document.addEventListener('DOMContentLoaded', () => {
        const marker = document.getElementById('patternMarker');
        const projectVideo = document.getElementById('projectVideo');
        const projectVideoEntity = document.getElementById('projectVideoEntity');
        const projectText = document.getElementById('projectText');
        const markerStatus = document.getElementById('markerStatus');
        const currentProject = document.getElementById('currentProject');
        const textLoadStatus = document.getElementById('textLoadStatus');
        const videoLoadStatus = document.getElementById('videoLoadStatus');
        const thankYouContainer = document.getElementById('thankYouContainer');
        const errorMessage = document.getElementById('errorMessage');
        const startOverlay = document.getElementById('startOverlay');
        const markerAnnounceImage = document.querySelector('.marker-image');
        const sceneEl = document.querySelector('a-scene');
        
        let canPlayVideo = false;
        let userInteracted = false;

        startOverlay.addEventListener('click', () => {
            userInteracted = true;
            startOverlay.style.display = 'none';
            if (markerAnnounceImage) {
                markerAnnounceImage.style.display = 'none';
            }

            marker.addEventListener('markerFound', () => {
                if (markerStatus) markerStatus.textContent = '検出中';
                if (markerAnnounceImage) {
                    markerAnnounceImage.style.display = 'none';
                }

                if (canPlayVideo) {
                    projectVideoEntity.setAttribute('visible', 'true');
                    projectVideo.play().catch(e => console.error("Video play error after marker found:", e));
                    console.log('Marker found, attempting to play video.');
                } else {
                    console.log('Marker found, but video cannot play yet.');
                    if (!canPlayVideo) console.log('Reason: Video not ready (canPlayVideo=false)');
                    if (errorMessage) errorMessage.textContent = '動画の準備ができていません。';
                }
            });

            marker.addEventListener('markerLost', () => {
                if (markerStatus) markerStatus.textContent = '消失';
                if (projectVideo) {
                    projectVideo.pause();
                    projectVideoEntity.setAttribute('visible', 'false');
                }
                if (markerAnnounceImage) {
                    markerAnnounceImage.style.display = 'flex';
                }
            });

            if (selectedProject && selectedProject.dir) {
                const playPromise = projectVideo.play();
                if (playPromise !== undefined) {
                    playPromise.then(() => {
                        projectVideo.pause();
                        projectVideo.currentTime = 0;
                        console.log("User interaction registered. Ready for audio playback.");
                    }).catch(error => {
                        console.warn("Initial muted play attempt failed, but interaction registered.", error);
                    });
                }
            }

            if (sceneEl && !sceneEl.hasLoaded) {
                 console.log('A-Frame scene not loaded yet, user interaction occurred.');
            }

        }, { once: true });

        const selectedProjectIndex = sessionStorage.getItem('selectedProject') || 0;
        const selectedProject = projects[selectedProjectIndex];
        
        if (currentProject) {
            currentProject.textContent = selectedProject ? `${selectedProject.name} - ${selectedProject.keyword}` : 'なし';
        }
        
        if (selectedProject) {
            projectText.setAttribute('text', {
                value: `${selectedProject.name}\n${selectedProject.keyword}`,
                align: 'center',
                width: 5,
                color: 'black'
            });
            if (textLoadStatus) textLoadStatus.textContent = '読込完了';
        } else {
            if (textLoadStatus) textLoadStatus.textContent = 'エラー';
        }

        if (selectedProject && selectedProject.dir) {
            const videoPath = `/items/${selectedProject.dir}/movie.mov`;
            projectVideo.src = videoPath;
            if (videoLoadStatus) videoLoadStatus.textContent = '準備中...';
            
            projectVideo.onloadeddata = () => {
                if (videoLoadStatus) videoLoadStatus.textContent = 'データ読込完了';
            };
            
            projectVideo.oncanplay = () => {
                if (videoLoadStatus) videoLoadStatus.textContent = '再生準備完了';
                canPlayVideo = true;
            };
            
            projectVideo.onerror = (e) => {
                console.error(`動画(${videoPath})の読み込み/再生エラー:`, e);
                console.error('エラーオブジェクト:', projectVideo.error);

                if (videoLoadStatus) videoLoadStatus.textContent = `読込失敗 (${projectVideo.error?.code || 'unknown'})`;
                if (errorMessage) errorMessage.textContent = `動画(${videoPath})の読み込みに失敗しました。詳細: ${projectVideo.error?.message || '不明なエラー'}`;
            };
            projectVideo.load();
        } else {
            if (errorMessage) errorMessage.textContent = '選択されたプロジェクト情報が見つかりません。';
            console.error('選択されたプロジェクト情報が見つかりません:', selectedProjectIndex, projects);
            if (videoLoadStatus) videoLoadStatus.textContent = 'エラー';
            if (textLoadStatus) textLoadStatus.textContent = 'エラー';
        }

        projectVideo.addEventListener('ended', () => {
            thankYouContainer.style.display = 'block';
            
            sessionStorage.setItem('selectedProject', selectedProjectIndex);
        });

        // 他のプロジェクトを見るための処理
        const projectSelector = document.getElementById('projectSelector');
        const watchAgainButton = document.getElementById('watchAgainButton');
        
        if (projectSelector && watchAgainButton) {
            // 現在選択されているプロジェクトをデフォルト選択に
            projectSelector.value = selectedProjectIndex;
            
            watchAgainButton.addEventListener('click', () => {
                const newProjectIndex = projectSelector.value;
                sessionStorage.setItem('selectedProject', newProjectIndex);
                
                // お礼メッセージを非表示
                thankYouContainer.style.display = 'none';
                
                // マーカーガイドを表示
                if (markerAnnounceImage) {
                    markerAnnounceImage.style.display = 'flex';
                }
                
                // 再読み込みして新しいプロジェクトの動画を準備
                location.reload();
            });
        }

        const debugElements = [markerStatus, currentProject, textLoadStatus, videoLoadStatus, errorMessage];
        debugElements.forEach(el => {
            if (!el) {
            }
        });
    });
</script>