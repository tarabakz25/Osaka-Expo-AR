---
import Layout from '../layouts/Layout.astro';

import Fukidashi from '/Fukidashi.glb?url';
import Hanabi from '/movies/ar-movie_hanabi.mp4?url';
---

<Layout>    
    <div class="arjs-loader" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); z-index: 9999; display: flex; justify-content: center; align-items: center;">
        <div style="color: white; font-size: 1.5em;">カメラとARの読み込み中...</div>
    </div>
    
    <!-- 最初にスクリプトを読み込む -->
    <script is:inline src="https://aframe.io/releases/1.4.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    
    <!-- freezeコンポーネントを定義するスクリプト -->
    <script is:inline>
        AFRAME.registerComponent('freeze-on-marker', {
          init: function () {
            const marker = this.el;
            let isFixed = false;
            
            // マーカーが検出されたときのイベント
            marker.addEventListener('markerFound', function () {
              if (isFixed) return; // 既に固定済みなら何もしない
              
              console.log('マーカーを検出しました！モデルを固定します');
              
              // モデルと動画プレーンを取得
              const model = marker.querySelector('[gltf-model]');
              const videoPlane = marker.querySelector('a-plane');
              if (!model || !videoPlane) {
                console.error('モデルまたはプレーンが見つかりません');
                return;
              }
              
              // 動画の再生を開始
              const video = document.querySelector('#hanabi-video');
              video.play().catch(e => {
                console.error('動画の再生に失敗しました:', e);
              });
              
              console.log('マーカーと要素が見つかりました。位置と回転を計算します。');
              
              // ワールド座標を最新の状態に更新
              marker.object3D.updateMatrixWorld();
              
              // 現在のワールド位置と回転を取得
              const modelPos = new THREE.Vector3();
              marker.object3D.getWorldPosition(modelPos);
              
              // 回転を取得する方法を修正
              const modelQuat = new THREE.Quaternion();
              marker.object3D.getWorldQuaternion(modelQuat);
              const modelRot = new THREE.Euler().setFromQuaternion(modelQuat);
              
              console.log('位置:', modelPos);
              console.log('回転:', modelRot);
              
              // シーンを取得
              const scene = document.querySelector('a-scene');
              
              // モデルをマーカーの子からシーン直下に移動して固定
              scene.appendChild(model);
              model.setAttribute('position', `${modelPos.x} ${modelPos.y} ${modelPos.z}`);
              model.setAttribute('rotation', 
                `${modelRot.x * 180 / Math.PI} ${modelRot.y * 180 / Math.PI} ${modelRot.z * 180 / Math.PI}`);
                
              // 動画プレーンも同様に固定
              // プレーンの位置をモデルの上に調整
              const planePos = new THREE.Vector3(
                modelPos.x,
                modelPos.y + 0.6, // モデルより上に表示
                modelPos.z
              );
              
              scene.appendChild(videoPlane);
              videoPlane.setAttribute('position', `${planePos.x} ${planePos.y} ${planePos.z}`);
              // 動画プレーンの回転を設定
              videoPlane.setAttribute('rotation', `-90 0 0`);
              
              isFixed = true;
              console.log('モデルと動画の固定が完了しました');
            });
          }
        });
    </script>

    <!-- シーンの定義 -->
    <a-scene embedded vr-mode-ui="enabled: false" renderer="logarithmicDepthBuffer: true;" arjs="sourceType: webcam; debugUIEnabled: false; trackingMethod: best;">
        <a-assets>
            <a-asset-item id="fukidashi-model" src={Fukidashi}></a-asset-item>
            <video id="hanabi-video" src={Hanabi} preload="auto" loop="true" playsinline webkit-playsinline></video>
        </a-assets>
        
        <a-marker preset="hiro" freeze-on-marker>
            <!-- 吹き出しモデル -->
            <a-entity 
            gltf-model="#fukidashi-model"
            scale="2 2 2" 
            position="0 0 0"
            rotation="0 90 -90"></a-entity>
            
            <!-- 動画を表示するプレーン -->
            <a-plane 
            material="shader: flat; src: #hanabi-video; transparent: true" 
            scale="2.5 2 2" 
            position="0 0.6 0" 
            rotation="-90 0 0"></a-plane>
        </a-marker>
        
        <a-entity camera></a-entity>
    </a-scene>
    
    <!-- ローダー処理用スクリプト -->
    <script is:inline>
        // DOMが読み込まれた後の処理
        document.addEventListener('DOMContentLoaded', () => {
            const scene = document.querySelector('a-scene');
            const loader = document.querySelector('.arjs-loader');
            
            const model = document.querySelector('[gltf-model]');
            model.addEventListener('model-loaded', function(e) {
              console.log('モデルの読み込みに成功しました', e);
            });
            
            model.addEventListener('model-error', function(e) {
              console.error('モデルの読み込みに失敗しました', e);
            });
            
            if (scene.hasLoaded) {
              loader.style.display = 'none';
            } else {
              scene.addEventListener('loaded', function() {
                loader.style.display = 'none';
              });
            }
        });
    </script>
</Layout>