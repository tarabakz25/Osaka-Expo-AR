---
import { Image } from "astro:assets"
import ARLayout from '../layouts/ARLayout.astro';
import MarkerAnnounce from '../assets/marker-announce.svg';
import { projects } from '../data/projects.js';
---

<ARLayout>    
    <script is:inline src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <div id="arjsContent">
        <!-- マーカー読み取り案内 -->
        <div class="marker-image">
            <Image src={MarkerAnnounce} alt="マーカー読み取り案内" width={250} height={250} />
        </div>
    
        <!-- デバッグ情報表示エリア -->
        <div id="debugInfo" style="position: fixed; top: 10px; left: 10px; background-color: rgba(0,0,0,0.7); color: white; padding: 10px; z-index: 9999; border-radius: 5px; width: 80%; max-width: 300px;">
            <h3 style="margin: 0 0 5px 0; font-size: 14px;">デバッグ情報</h3>
            <div>マーカー状態: <span id="markerStatus">未検出</span></div>
            <div>現在のプロジェクト: <span id="currentProject">なし</span></div>
            <div>テキスト読込: <span id="textLoadStatus">未読込</span></div>
            <div>動画読込: <span id="videoLoadStatus">未読込</span></div>
            <div id="errorMessage" style="color: #ff6b6b;"></div>
        </div>
        
        <!-- 動画再生後のお礼メッセージ -->
        <div id="thankYouContainer" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 30; background-color: rgba(0, 0, 0, 0.8); color: white; padding: 2em; border-radius: 1em; text-align: center; max-width: 80%;">
            <h2>ご視聴ありがとうございました！</h2>
            <p>学生の作品はいかがでしたか？</p>
            <p>良ければ、学生へのメッセージをお願いします。</p>
            <a href="/message" id="messageButton" style="display: inline-block; margin-top: 1em; background-color: #4caf50; color: white; padding: 0.75rem 1.5rem; border-radius: 2rem; text-decoration: none; font-size: 1rem;">メッセージを送る</a>
        </div>
        
        <div id="arjs-scene">
            <a-scene
                vr-mode-ui="enabled: false;"
                renderer="logarithmicDepthBuffer: true; precision: medium;"
                embedded
                arjs="trackingMethod: best; sourceType: webcam; debugUIEnabled: true;">
                
                <!-- アセット管理システム -->
                <a-assets>
                    <video id="projectVideo" src="" preload="auto" loop="false" playsinline></video>
                </a-assets>
                
                <!-- マーカーが検出された位置に固定表示するためのエンティティ -->
                <a-entity id="fixed-content" visible="false"></a-entity>
    
                <a-marker type="pattern" url='pattern.patt' id="patternMarker">
                    <a-entity
                        id="projectText"
                        scale="1 1 1"
                        position="3 -3 0"
                        text="value: テスト表示; align: center; width: 2; color: black;"
                        visible="true">
                    </a-entity>
                    <a-video
                        id="projectVideoEntity"
                        width="4"
                        height="1"
                        position="0 0 0"
                        rotation="-45 0 0"
                        src="#projectVideo"
                        playsinline>
                    </a-video>
                </a-marker>
                <!-- カメラ -->
                <a-entity camera></a-entity>
            </a-scene>
        </div>
    </div>
</ARLayout>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        const marker = document.getElementById('patternMarker');
        const projectVideo = document.getElementById('projectVideo');
        const projectText = document.getElementById('projectText');
        const markerStatus = document.getElementById('markerStatus');
        const currentProject = document.getElementById('currentProject');
        const textLoadStatus = document.getElementById('textLoadStatus');
        const videoLoadStatus = document.getElementById('videoLoadStatus');
        const thankYouContainer = document.getElementById('thankYouContainer');
        const errorMessage = document.getElementById('errorMessage');
        
        // プロジェクトデータを取得
        const projectsData = [
            {
                name: "松井ひなこ",
                romaji: "MATSUI HINAKO",
                keyword: "パフェに甘えて",
                dir: "pafe"
            },
            {
                name: "林美羽",
                romaji: "HAYASHI MIU",
                keyword: "わかめプロジェクト",
                dir: "wakame"
            },
            {
                name: "花火",
                romaji: "HANABI",
                keyword: "FRCロボコン",
                dir: "hanabi"
            }
        ];
        
        // セッションストレージから選択されたプロジェクトを取得
        const selectedProjectIndex = sessionStorage.getItem('selectedProject') || 0;
        const selectedProject = projectsData[selectedProjectIndex];
        
        // デバッグ情報を更新
        currentProject.textContent = selectedProject ? `${selectedProject.name} - ${selectedProject.keyword}` : 'なし';
        
        // 動画ソースを設定
        if (selectedProject && selectedProject.dir) {
            const videoPath = `/items/${selectedProject.dir}/movie.webm`;
            projectVideo.src = videoPath;
            projectVideo.load();
            videoLoadStatus.textContent = '読込中...';
            
            projectVideo.onloadeddata = () => {
                videoLoadStatus.textContent = '読込完了';
            };
            
            projectVideo.onerror = (e) => {
                videoLoadStatus.textContent = '読込失敗';
                errorMessage.textContent = `動画(${videoPath})の読み込みに失敗しました`;
                console.error(`動画(${videoPath})の読み込みに失敗しました:`, e);
            };
        }
        
        // テキスト表示を設定
        if (selectedProject) {
            projectText.setAttribute('text', {
                value: `${selectedProject.name}\n${selectedProject.keyword}`,
                align: 'center',
                width: 5,
                color: 'black'
            });
            textLoadStatus.textContent = '読込完了';
        }

        marker.addEventListener('markerFound', () => {
            projectVideo.play();
            markerStatus.textContent = '検出中';
        });

        marker.addEventListener('markerLost', () => {
            projectVideo.pause();
            markerStatus.textContent = '未検出';
        });
        
        // 動画再生終了時の処理
        projectVideo.addEventListener('ended', () => {
            // お礼メッセージを表示
            thankYouContainer.style.display = 'block';
            
            // 選択されたプロジェクトをメッセージページ用に保存
            sessionStorage.setItem('selectedProject', selectedProjectIndex);
        });
    });
</script>

<style>
    #arjsContent {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10;
    }
    
    #loadingMessage {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 1em;
        border-radius: 0.5em;
        text-align: center;
        font-size: 1.2em;
    }
    
    #backButton {
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 0.5em 1em;
        border-radius: 0.5em;
        text-decoration: none;
        font-size: 1em;
    }
    
    #arjs-scene {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
    }
    
    #messageButton {
        display: inline-block;
        background-color: #4caf50;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 2rem;
        text-decoration: none;
        font-size: 1rem;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
    }
    
    #messageButton:hover {
        background-color: #3d9140;
        transform: translateY(-2px);
    }
    
    .marker-image {
        position: fixed;
        top: 70%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 250px;
        height: 250px;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 20;
    }
    
    .marker-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }
</style>