---
import Layout from '../layouts/Layout.astro';

import Fukidashi from '/Fukidashi.glb?url';
import Hanabi from '/movies/ar-movie_hanabi.mp4?url';
---

<Layout>    
    <div class="arjs-loader" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); z-index: 9999; display: flex; justify-content: center; align-items: center;">
        <div style="color: white; font-size: 1.5em;">カメラとARの読み込み中...</div>
    </div>
    
    <!-- デバッグ表示用の要素 -->
    <div id="debug-overlay" style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background-color: rgba(0,0,0,0.7); color: white; padding: 10px 20px; border-radius: 5px; z-index: 1000; display: none;">
        マーカーを検出しました
    </div>
    
    <!-- Mind AR用のスクリプトを読み込む -->
    <script is:inline src="https://aframe.io/releases/1.4.0/aframe.min.js"></script>
    <script is:inline src="https://cdn.jsdelivr.net/npm/mind-ar@1.2.3/dist/mindar-image-aframe.prod.js"></script>
    
    <!-- 動画再生用コンポーネント -->
    <script is:inline>
        AFRAME.registerComponent('play-on-marker', {
          init: function () {
            const marker = this.el.closest('a-marker');
            const video = document.querySelector('#hanabi-video');
            
            if (marker && video) {
              // マーカーが検出されたときに動画を再生
              marker.addEventListener('targetFound', function () {
                console.log('マーカーを検出しました！動画を再生します');
                video.muted = true; // 自動再生のためにミュート
                video.play().catch(e => {
                  console.error('動画の再生に失敗しました:', e);
                });
              });
              
              // マーカーを見失ったときに動画を一時停止
              marker.addEventListener('targetLost', function () {
                console.log('マーカーを見失いました');
                // video.pause(); // 一時停止したい場合はコメントを外す
              });
            }
          }
        });
    </script>

    <!-- シーンの定義 -->
    <a-scene
        vr-mode-ui="enabled: false"
        mindar-image="imageTargetSrc: /targets.mind;"
        embedded
        color-space="sRGB"
        renderer="colorManagement: true, physicallyCorrectLights"
        camera="active: true"
        loading-screen="enabled: false">
        
        <a-assets>
            <a-asset-item id="fukidashi-model" src={Fukidashi} response-type="arraybuffer" crossorigin="anonymous"></a-asset-item>
            <video id="hanabi-video" src={Hanabi} preload="auto" loop="true" muted crossorigin="anonymous" playsinline webkit-playsinline></video>
        </a-assets>
        
        <!-- マーカーの設定 -->
        <a-entity camera></a-entity>
        
        <a-entity mindar-image-target="targetIndex: 0">
            <!-- 吹き出しモデル -->
            <a-entity 
                gltf-model="#fukidashi-model"
                scale="2 2 2" 
                position="0 0 0"
                rotation="0 90 -90">
            </a-entity>
            
            <!-- 動画を表示するプレーン -->
            <a-plane 
                material="shader: flat; src: #hanabi-video; transparent: true" 
                scale="4 3.2 3" 
                position="0 0.5 0" 
                rotation="-90 0 0"
                play-on-marker>
            </a-plane>

            <!-- 動画テキストの表示 -->
            <a-text 
                value="神山まるごと高専ARプロジェクト" 
                position="0 0.5 0" 
                scale="0.5 0.5 0.5" 
                color="#fff" 
                align="center">
            </a-text>
        </a-entity>
    </a-scene>
    
    <!-- ローダー処理用スクリプト -->
    <script is:inline>
        // アセットの読み込み状態を確認
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOMContentLoadedイベントが発火しました');
            const scene = document.querySelector('a-scene');
            const loader = document.querySelector('.arjs-loader');
            const debugOverlay = document.querySelector('#debug-overlay');
            
            // シーンの状態を確認
            console.log('シーンの状態:', {
                scene: scene ? '存在します' : '存在しません',
                loader: loader ? '存在します' : '存在しません',
                debugOverlay: debugOverlay ? '存在します' : '存在しません'
            });
            
            // カメラの権限を確認
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    console.log('カメラへのアクセスが許可されました');
                    stream.getTracks().forEach(track => track.stop());
                })
                .catch(err => {
                    console.error('カメラへのアクセスが拒否されました:', err);
                    alert('カメラへのアクセスを許可してください。');
                });
            
            // モデルのURLをコンソールに出力
            const modelItem = document.querySelector('#fukidashi-model');
            console.log('モデルのURL:', modelItem ? modelItem.getAttribute('src') : 'モデルが見つかりません');
            
            // マーカーのイベントリスナーを設定
            const marker = document.querySelector('[mindar-image-target]');
            console.log('マーカー要素:', marker ? '存在します' : '存在しません');
            
            if (marker) {
                marker.addEventListener('targetFound', () => {
                    console.log('マーカーを検出しました');
                    debugOverlay.style.display = 'block';
                });
                
                marker.addEventListener('targetLost', () => {
                    console.log('マーカーを見失いました');
                    debugOverlay.style.display = 'none';
                });
            }
            
            // アセットが読み込まれたときのイベント
            scene.addEventListener('loaded', function() {
                console.log('シーンが読み込まれました');
                loader.style.display = 'none';
            });
            
            // シーンの読み込みエラーを監視
            scene.addEventListener('error', function(e) {
                console.error('シーンの読み込みエラー:', e);
                loader.style.display = 'none';
            });
            
            // モデルの読み込みエラーを監視
            const modelEntity = document.querySelector('[gltf-model]');
            if (modelEntity) {
                modelEntity.addEventListener('model-loaded', function(e) {
                    console.log('モデルの読み込みに成功しました:', e.detail);
                });
                
                modelEntity.addEventListener('model-error', function(e) {
                    console.error('モデルの読み込みに失敗しました:', e.detail);
                    // バックアップとして単純な箱を表示
                    this.setAttribute('geometry', 'primitive: box; width: 1; height: 1; depth: 1');
                    this.setAttribute('material', 'color: red');
                });
            }
            
            // タイムアウト処理を追加
            setTimeout(() => {
                console.log('タイムアウト: ローダーを非表示にします');
                loader.style.display = 'none';
            }, 10000); // 10秒後にローダーを非表示
        });
    </script>
</Layout>