---
import ARLayout from '../layouts/ARLayout.astro';
import Fukidashi from '/Fukidashi.glb?url';
import { projects } from '../data/projects.js';
---

<ARLayout>    
    <script is:inline src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <div id="arjsContent">
        <div id="arjs-scene">
            <a-scene
                vr-mode-ui="enabled: false;"
                renderer="logarithmicDepthBuffer: true; precision: medium;"
                embedded
                arjs="trackingMethod: best; sourceType: webcam; debugUIEnabled: false;">
                
                <!-- カメラとマーカー設定 -->
                <a-nft
                    type="nft"
                    url="/nft/marker"
                    smooth="true"
                    smoothCount="10"
                    smoothTolerance=".01"
                    smoothThreshold="5">
                    
                    <!-- マーカーが検出されたら表示されるコンテンツ -->
                    <a-entity
                        id="fukidashiModel"
                        gltf-model={Fukidashi}
                        scale="5 5 5"
                        position="0 0 0"
                        rotation="0 0 0">
                    </a-entity>
                    
                    <!-- テキスト表示用エンティティ -->
                    <a-entity
                        id="projectText"
                        position="0 1 0"
                        text="value: Loading...; align: center; width: 2; color: black;">
                    </a-entity>
                    
                    <!-- 動画表示用エンティティ -->
                    <a-video
                        id="projectVideo"
                        width="3"
                        height="1.5"
                        position="0 3 0"
                        visible="false">
                    </a-video>
                </a-nft>
                
                <!-- カメラ -->
                <a-entity camera></a-entity>
            </a-scene>
        </div>
    </div>
</ARLayout>

<script define:vars={{ projects }}>
    // セッションストレージから選択されたプロジェクトを取得
    document.addEventListener('DOMContentLoaded', () => {
        const selectedProjectIndex = sessionStorage.getItem('selectedProject');
        
        if (selectedProjectIndex !== null && projects[selectedProjectIndex]) {
            const project = projects[selectedProjectIndex];
            console.log('選択されたプロジェクト:', project);
            
            // プロジェクトディレクトリからテキストを取得
            fetch(`/items/${project.dir}/text.txt`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`テキストファイルの取得に失敗: ${response.status}`);
                    }
                    return response.text();
                })
                .then(text => {
                    console.log('テキスト内容:', text);
                    
                    // ARマーカーが読み込まれたときの処理
                    const nftMarker = document.querySelector('a-nft');
                    const loadingMessage = document.getElementById('loadingMessage');
                    const projectText = document.getElementById('projectText');
                    const projectVideo = document.getElementById('projectVideo');
                    
                    // テキストと動画ファイル名を分離（もし含まれている場合）
                    let textContent = text;
                    let videoFileName = null;
                    
                    // テキストに動画ファイル名が含まれているか確認
                    const parts = text.split(' - ');
                    if (parts.length > 1) {
                        textContent = parts[0];
                        videoFileName = parts[1].trim();
                    }
                    
                    nftMarker.addEventListener('markerFound', () => {
                        console.log('NFTマーカーが検出されました');
                        loadingMessage.style.display = 'none';
                        
                        // テキストを更新
                        projectText.setAttribute('text', `value: ${textContent}; align: center; width: 2; color: black;`);
                        
                        // 動画が指定されている場合は表示
                        if (videoFileName) {
                            const videoPath = `/items/${project.dir}/${videoFileName}`;
                            console.log('動画パス:', videoPath);
                            
                            projectVideo.setAttribute('src', videoPath);
                            projectVideo.setAttribute('visible', 'true');
                            
                            // 動画の読み込みと再生
                            const videoEl = projectVideo.components.material.material.map.image;
                            if (videoEl) {
                                videoEl.play().catch(e => console.error('動画再生エラー:', e));
                            }
                        }
                    });
                    
                    nftMarker.addEventListener('markerLost', () => {
                        console.log('NFTマーカーを見失いました');
                        loadingMessage.style.display = 'block';
                        
                        // 動画を一時停止
                        if (videoFileName) {
                            const videoEl = projectVideo.components.material.material.map.image;
                            if (videoEl) {
                                videoEl.pause();
                            }
                            projectVideo.setAttribute('visible', 'false');
                        }
                    });
                })
                .catch(error => {
                    console.error('プロジェクトデータの取得に失敗しました:', error);
                });
        } else {
            console.error('選択されたプロジェクトが見つかりません');
        }
    });
</script>

<style>
    #arjsContent {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10;
    }
    
    #loadingMessage {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 1em;
        border-radius: 0.5em;
        text-align: center;
        font-size: 1.2em;
    }
    
    #backButton {
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 20;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 0.5em 1em;
        border-radius: 0.5em;
        text-decoration: none;
        font-size: 1em;
    }
    
    #arjs-scene {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
    }
</style>