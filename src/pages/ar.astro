---
import Layout from '../layouts/Layout.astro';
import Fukidashi from '/Fukidashi.glb?url';
---

<Layout>
  <div class="ar-container">
    <div id="overlay" class="overlay"></div>
    <div id="message" class="message"></div>
    <div id="ar-instruction" class="ar-instruction">マーカーをカメラにかざしてください</div>
    
    <div id="survey" class="survey hidden">
      <h3>アンケート</h3>
      <p>このプロジェクトはいかがでしたか？</p>
      <div class="survey-options">
        <button class="survey-btn" data-rating="good">👍 良かった</button>
        <button class="survey-btn" data-rating="neutral">😐 普通</button>
        <button class="survey-btn" data-rating="bad">👎 改善が必要</button>
      </div>
      <button id="back-btn" class="back-btn">戻る</button>
    </div>
    
    <!-- A-FrameとAR.jsのスクリプト読み込み順序を修正 -->
    <script src="https://aframe.io/releases/1.4.0/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    
    <!-- AR.jsシーン - NFTマーカーの代わりに標準マーカーを使用 -->
    <a-scene embedded arjs="trackingMethod: best; sourceType: webcam; debugUIEnabled: false;">
      <!-- アセット管理の追加 -->
      <a-assets>
        <a-asset-item id="fukidashi-asset" src={Fukidashi}></a-asset-item>
        <video id="project-video" autoplay muted crossorigin="anonymous"></video>
      </a-assets>
      
      <!-- 標準マーカーを使用 -->
      <a-marker id="ar-marker" preset="hiro">
        <!-- マーカー上に表示される3Dモデル（吹き出し） -->
        <a-entity
          id="fukidashi-model"
          gltf-model="#fukidashi-asset"
          scale="0.5 0.5 0.5"
          position="0 0.5 0"
          rotation="0 0 0"
          visible="false">
        </a-entity>
        
        <!-- 動画プレーヤー -->
        <a-video
          id="video-player"
          src="#project-video"
          width="1.6"
          height="0.9"
          position="0 1.5 0"
          rotation="-90 0 0"
          visible="false">
        </a-video>
        
        <!-- テキスト表示エリア -->
        <a-entity
          id="text-container"
          position="0 0.8 0"
          text="align: center; width: 2; color: #ffffff; value: プロジェクト情報がここに表示されます"
          visible="false">
        </a-entity>
      </a-marker>
      
      <!-- カメラ -->
      <a-entity camera></a-entity>
    </a-scene>
  </div>

  <script>
    // ページ読み込み完了後に実行
    window.addEventListener('load', () => {
      // 要素の取得
      const marker = document.getElementById('ar-marker');
      const fukidashiModel = document.getElementById('fukidashi-model');
      const videoPlayer = document.getElementById('video-player');
      const textContainer = document.getElementById('text-container');
      const overlay = document.getElementById('overlay');
      const message = document.getElementById('message');
      const instruction = document.getElementById('ar-instruction');
      const survey = document.getElementById('survey');
      const backBtn = document.getElementById('back-btn');
      const projectVideo = document.getElementById('project-video');
      
      // URLパラメータからプロジェクトIDを取得
      const urlParams = new URLSearchParams(window.location.search);
      const projectId = urlParams.get('project') || 'default';
      
      // セッションストレージからプロジェクトインデックスを取得
      const storedIndex = sessionStorage.getItem('selectedProject');
      const projectIndex = storedIndex ? parseInt(storedIndex) : 0;
      
      // プロジェクト情報（実際のデータに置き換える）
      const projectData = {
        default: {
          videoUrl: '/videos/default.mp4',
          description: 'デフォルトプロジェクトの説明文'
        }
        // 他のプロジェクト情報を追加
      };

      // マーカーが検出されたときの処理
      marker.addEventListener('markerFound', () => {
        // 説明を非表示
        instruction.style.display = 'none';
        
        // プロジェクト情報を取得
        const project = projectData[projectId] || projectData.default;
        
        // テキストを設定
        textContainer.setAttribute('text', `align: center; width: 2; color: #ffffff; value: ${project.description}`);
        
        // 動画を設定
        projectVideo.src = project.videoUrl;
        projectVideo.load();
        projectVideo.play();
        
        // 要素を表示
        fukidashiModel.setAttribute('visible', 'true');
        textContainer.setAttribute('visible', 'true');
        videoPlayer.setAttribute('visible', 'true');
        
        // 動画終了時にアンケートを表示
        projectVideo.addEventListener('ended', () => {
          overlay.style.opacity = '1';
          survey.classList.remove('hidden');
        });
      });
      
      // マーカーを見失ったときの処理
      marker.addEventListener('markerLost', () => {
        // 説明を再表示
        instruction.style.display = 'block';
        
        // 要素を非表示
        fukidashiModel.setAttribute('visible', 'false');
        textContainer.setAttribute('visible', 'false');
        videoPlayer.setAttribute('visible', 'false');
      });
      
      // アンケートボタンのイベント処理
      document.querySelectorAll('.survey-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const rating = btn.dataset.rating;
          // ここでアンケート結果を保存する処理を追加（例：APIリクエスト）
          
          // メッセージ表示
          message.textContent = 'ご回答ありがとうございました！';
          message.style.opacity = '1';
          
          // 非表示にする
          survey.classList.add('hidden');
          
          // 数秒後にメッセージを消す
          setTimeout(() => {
            message.style.opacity = '0';
            overlay.style.opacity = '0';
          }, 3000);
        });
      });
      
      // 戻るボタン
      backBtn.addEventListener('click', () => {
        survey.classList.add('hidden');
        overlay.style.opacity = '0';
      });
    });
  </script>
</Layout>

<style>
  .ar-container {
    position: relative;
    width: 100%;
    height: 100vh;
    overflow: hidden;
  }
  
  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 10;
    opacity: 0;
    transition: opacity 0.5s ease;
  }
  
  .message {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 255, 255, 0.8);
    color: #000;
    padding: 20px;
    border-radius: 10px;
    z-index: 11;
    opacity: 0;
    transition: opacity 0.5s ease;
  }
  
  .ar-instruction {
    position: fixed;
    top: 20px;
    left: 0;
    width: 100%;
    text-align: center;
    color: white;
    background-color: rgba(0, 0, 0, 0.6);
    padding: 10px;
    z-index: 5;
  }
  
  .survey {
    position: fixed;
    bottom: 50px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(255, 255, 255, 0.9);
    color: #000;
    padding: 20px;
    border-radius: 10px;
    z-index: 20;
    text-align: center;
    width: 80%;
    max-width: 400px;
    transition: opacity 0.5s ease;
  }
  
  .survey-options {
    display: flex;
    justify-content: space-around;
    margin: 20px 0;
  }
  
  .survey-btn {
    padding: 10px 15px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .back-btn {
    padding: 10px 20px;
    background-color: #e74c3c;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .hidden {
    display: none !important;
  }
</style>