---
import ARLayout from '../layouts/ARLayout.astro';
import Fukidashi from '/Fukidashi.glb?url';
import Marker from '/pattern.patt?url';
import { projects } from '../data/projects.js';
import BusinessCard from "../components/BusinessCard.astro";

let projects = [
	{
		name: "松井ひなこ",
		romaji: "MATSUI HINAKO",
		keyword: "パフェに甘えて",
		dir: "pafe"
	},
	{
		name: "林美羽",
		romaji: "HAYASHI MIU",
		keyword: "わかめプロジェクト",
		dir: "wakame"
	},
	{
		name: "花火",
		romaji: "HANABI",
		keyword: "FRCロボコン",
		dir: "hanabi"
	}
];
---

<ARLayout>    
    <script is:inline src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <div id="arjsContent">
        <!-- マーカー検出状態メッセージ -->
        <!-- <div id="markerGuideMessage" class="marker-guide">
            <div class="guide-content">
                <h2>ARマーカーを読み取ってください</h2>
            </div>
        </div> -->
        
        <!-- プロジェクト紹介セクション -->
        <div id="projectIntroduction" class="project-intro">
            <h2 class="page-title">プロジェクト紹介</h2>
            <div class="card-slider-container">
                <div class="card-slider" id="cardSlider">
                    {projects.map((project, index) => (
                        <div class="card-slide" data-index={index}>
                            <BusinessCard
                                name={project.name}
                                romaji={project.romaji}
                                keyword={project.keyword}
                            />
                        </div>
                    ))}
                </div>
                <div class="swipe-hint">← スワイプでカードを切り替え →</div>
            </div>
            <div class="pagination-dots" id="paginationDots">
                {projects.map((_, index) => (
                    <span class="dot" data-index={index}></span>
                ))}
            </div>
            <div class="tap-hint">カードをタップして選択</div>
        </div>
        
        <!-- デバッグ情報表示エリア -->
        <div id="debugInfo" style="position: fixed; top: 10px; left: 10px; background-color: rgba(0,0,0,0.7); color: white; padding: 10px; z-index: 9999; border-radius: 5px; width: 80%; max-width: 300px;">
            <h3 style="margin: 0 0 5px 0; font-size: 14px;">デバッグ情報</h3>
            <div>マーカー状態: <span id="markerStatus">未検出</span></div>
            <div>現在のプロジェクト: <span id="currentProject">なし</span></div>
            <div>テキスト読込: <span id="textLoadStatus">未読込</span></div>
            <div>動画読込: <span id="videoLoadStatus">未読込</span></div>
            <div id="errorMessage" style="color: #ff6b6b;"></div>
        </div>
        
        <!-- 動画再生後のお礼メッセージ -->
        <div id="thankYouContainer" class="thank-you-container">
            <h2>ご視聴ありがとうございました！</h2>
            <p>学生の作品はいかがでしたか？</p>
            <div class="buttons-container">
                <button id="watchAgainButton" class="action-button">もう一度見る</button>
                <a href="/message" id="messageButton" class="action-button">メッセージを送る</a>
            </div>
        </div>
        
        <div id="arjs-scene">
            <a-scene
                vr-mode-ui="enabled: false;"
                renderer="logarithmicDepthBuffer: true; precision: medium;"
                embedded
                arjs="trackingMethod: best; sourceType: webcam; debugUIEnabled: false;">
                
                <!-- アセットマネージメントシステムを追加 -->
                <a-assets>
                    <video 
                        id="videoSource" 
                        src=""
                        crossorigin="anonymous"
                        playsinline
                        webkit-playsinline
                        muted>
                    </video>
                </a-assets>
                
                <!-- マーカーが検出された位置に固定表示するためのエンティティを追加 -->
                <a-entity id="fixed-content" visible="false"></a-entity>
    
                <a-marker
                    type="pattern"
                    url="/pattern.patt"
                    id="hiroMarker"
                    emitevents="true"
                    cursor="rayOrigin: mouse">
                    <!-- マーカー上に直接コンテンツを配置 -->
                    <a-entity
                        id="fukidashiModel"
                        gltf-model={Fukidashi}
                        scale="1 1 2"
                        position="3 -4 0"
                        rotation="180 90 -90"
                        visible="true">
                    </a-entity>
                    <a-entity
                        id="projectText"
                        scale="1 1 1"
                        position="3 -3 0"
                        text="value: テスト表示; align: center; width: 2; color: black;"
                        visible="true">
                    </a-entity>
                    <a-video
                        id="projectVideo"
                        width="7"
                        height="2"
                        position="3 -3 0"
                        rotation="0 0 90"
                        autoplay
                        playsinline>
                    </a-video>
                </a-marker>
                <!-- カメラ -->
                <a-entity camera></a-entity>
            </a-scene>
        </div>
    </div>
</ARLayout>

<style>
    /* マーカー誘導メッセージのスタイル */
    .marker-guide {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 20;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        text-align: center;
    }
    
    .guide-content {
        background-color: rgba(30, 30, 30, 0.9);
        padding: 2rem;
        border-radius: 1rem;
        max-width: 80%;
    }
    
    @keyframes phoneMove {
        0%, 100% { transform: translateX(-50%) translateY(0); }
        50% { transform: translateX(-50%) translateY(-30px); }
    }
    
    /* プロジェクト紹介のスタイル */
    .project-intro {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        z-index: 15;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
    }
    
    .page-title {
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
        text-align: center;
    }
    
    .card-slider-container {
        width: 100%;
        max-width: 350px;
        overflow: hidden;
        position: relative;
    }
    
    .card-slider {
        display: flex;
        transition: transform 0.3s ease;
    }
    
    .card-slide {
        flex: 0 0 100%;
        padding: 0 15px;
        box-sizing: border-box;
    }
    
    .swipe-hint, .tap-hint {
        text-align: center;
        margin: 1rem 0;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
    }
    
    .pagination-dots {
        display: flex;
        justify-content: center;
        margin-top: 1rem;
    }
    
    .dot {
        width: 8px;
        height: 8px;
        background-color: rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        margin: 0 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .dot.active {
        background-color: white;
    }
    
    /* ありがとうメッセージのスタイル */
    .thank-you-container {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 30;
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 2em;
        border-radius: 1em;
        text-align: center;
        max-width: 80%;
    }
    
    .buttons-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-top: 1.5rem;
    }
    
    .action-button {
        display: inline-block;
        background-color: #4caf50;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 2rem;
        text-decoration: none;
        font-size: 1rem;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .action-button:hover {
        background-color: #3d8b40;
    }
</style>

<script define:vars={{ projects }}>
    // DOMが読み込まれたら実行
    document.addEventListener('DOMContentLoaded', () => {
        // 必要な要素の取得
        const marker = document.querySelector('a-marker');
        const markerGuideMessage = document.getElementById('markerGuideMessage');
        const projectIntroduction = document.getElementById('projectIntroduction');
        const projectText = document.getElementById('projectText');
        const projectVideo = document.getElementById('projectVideo');
        const thankYouContainer = document.getElementById('thankYouContainer');
        const watchAgainButton = document.getElementById('watchAgainButton');
        
        // デバッグ情報表示用要素
        const markerStatus = document.getElementById('markerStatus');
        const currentProject = document.getElementById('currentProject');
        const textLoadStatus = document.getElementById('textLoadStatus');
        const videoLoadStatus = document.getElementById('videoLoadStatus');
        const errorMessage = document.getElementById('errorMessage');
        
        // プロジェクト紹介用の変数
        const cardSlider = document.getElementById('cardSlider');
        const paginationDots = document.getElementById('paginationDots');
        let currentSlide = 0;
        let startX, moveX;
        let videoCompleted = false;
        let selectedProject = null;
        
        // === 1. 最初にプロジェクト紹介画面を表示 ===
        if (projectIntroduction) {
            // 常に最初はプロジェクト選択画面を表示
            projectIntroduction.style.display = 'flex';
            if (markerGuideMessage) {
                markerGuideMessage.style.display = 'none';
            }
            initCardSlider();
        }
        
        // カードスライダーの初期化
        function initCardSlider() {
            // ドットの初期状態を設定
            const dots = paginationDots.querySelectorAll('.dot');
            dots[0].classList.add('active');
            
            // カードのスワイプイベント
            cardSlider.addEventListener('touchstart', (e) => {
                startX = e.touches[0].clientX;
            });
            
            cardSlider.addEventListener('touchmove', (e) => {
                moveX = e.touches[0].clientX;
            });
            
            cardSlider.addEventListener('touchend', () => {
                if (startX - moveX > 50) { // 右へスワイプ
                    changeSlide(currentSlide + 1);
                } else if (moveX - startX > 50) { // 左へスワイプ
                    changeSlide(currentSlide - 1);
                }
            });
            
            // カードのタップで選択
            const slides = cardSlider.querySelectorAll('.card-slide');
            slides.forEach((slide, index) => {
                slide.addEventListener('click', () => {
                    selectProject(index);
                });
            });
            
            // ドットの切り替え
            dots.forEach((dot, index) => {
                dot.addEventListener('click', () => {
                    changeSlide(index);
                });
            });
        }
        
        // スライドの切り替え
        function changeSlide(index) {
            if (index < 0) index = projects.length - 1;
            if (index >= projects.length) index = 0;
            
            currentSlide = index;
            cardSlider.style.transform = `translateX(-${currentSlide * 100}%)`;
            
            // ドットの状態を更新
            const dots = paginationDots.querySelectorAll('.dot');
            dots.forEach((dot, i) => {
                if (i === currentSlide) {
                    dot.classList.add('active');
                } else {
                    dot.classList.remove('active');
                }
            });
        }
        
        // === 2. プロジェクトを選択して動画とテキストを読み込む ===
        function selectProject(index) {
            // セッションストレージに保存
            sessionStorage.setItem('selectedProject', index);
            selectedProject = projects[index];
            
            // デバッグ情報の更新
            if (currentProject) {
                currentProject.textContent = `選択: ${selectedProject.name}`;
            }
            
            // 動画のパスを設定し、プリロード開始
            const videoPath = `/items/${selectedProject.dir}/movie.mp4`;
            if (videoLoadStatus) videoLoadStatus.textContent = 'ロード中...';
            
            // テキストの準備
            if (projectText) {
                projectText.setAttribute('text', `value: ${selectedProject.name} - ${selectedProject.keyword}; align: center; width: 2; color: black;`);
                if (textLoadStatus) textLoadStatus.textContent = '準備完了';
            }
            
            // 動画のプリロード（実際には準備するだけ）
            try {
                const video = document.createElement('video');
                video.src = videoPath;
                video.preload = 'auto';
                video.muted = true;
                video.addEventListener('loadeddata', () => {
                    if (videoLoadStatus) videoLoadStatus.textContent = '準備完了';
                    console.log('動画のプリロードが完了しました');
                    
                    // === 3. プリロード完了後、マーカー誘導画面を表示 ===
                    projectIntroduction.style.display = 'none';
                    if (markerGuideMessage) markerGuideMessage.style.display = 'flex';
                });
                
                video.addEventListener('error', (e) => {
                    console.error('動画プリロードエラー:', e);
                    if (videoLoadStatus) videoLoadStatus.textContent = 'エラー';
                    if (errorMessage) errorMessage.textContent = `動画の準備に失敗しました: ${e.message || 'エラー'}`;
                    
                    // エラーがあっても次の画面に進める
                    projectIntroduction.style.display = 'none';
                    if (markerGuideMessage) markerGuideMessage.style.display = 'flex';
                });
            } catch (e) {
                console.error('動画準備エラー:', e);
                if (videoLoadStatus) videoLoadStatus.textContent = 'エラー';
                if (errorMessage) errorMessage.textContent = `動画の準備に失敗しました: ${e.message || 'エラー'}`;
                
                // エラーがあっても次の画面に進める
                projectIntroduction.style.display = 'none';
                if (markerGuideMessage) markerGuideMessage.style.display = 'flex';
            }
        }
        
        // マーカーが存在する場合のみイベントリスナーを追加
        if (marker) {
            // マーカーが検出されたときの処理
            marker.addEventListener('markerFound', () => {
                console.log('マーカーが検出されました');
                if (markerStatus) {
                    markerStatus.textContent = '検出中';
                    markerStatus.style.color = '#66ff66';
                }
                if (markerGuideMessage) markerGuideMessage.style.display = 'none';
                
                // 既に動画再生が完了していたらお礼メッセージを表示
                if (videoCompleted) {
                    if (thankYouContainer) thankYouContainer.style.display = 'block';
                    return;
                }
                
                // マーカー検出デバッグ情報を追加
                if (errorMessage) {
                    errorMessage.textContent = 'マーカーを検出しました。マーカー上に直接表示します...';
                    errorMessage.style.color = '#66ff66';
                }
                
                // 選択されたプロジェクトがない場合は処理を中止
                if (!selectedProject) {
                    if (errorMessage) errorMessage.textContent = 'プロジェクトが選択されていません';
                    return;
                }
                
                // markerContentの条件をなくし、直接projectTextを更新
                const projectTextEl = document.getElementById('projectText');
                if (projectTextEl) {
                    // 選択されたプロジェクトのテキストを表示するよう更新
                    projectTextEl.setAttribute('text', `value: ${selectedProject.name} - ${selectedProject.keyword}; align: center; width: 2; color: black;`);
                    projectTextEl.setAttribute('visible', 'true');
                }
                
                // 動画のパスを設定
                const videoPath = `/items/${selectedProject.dir}/movie.mp4`;
                console.log('動画パス:', videoPath);
                
                // デバッグ情報を更新
                if (errorMessage) {
                    errorMessage.textContent = `動画をロード中: ${videoPath}`;
                    errorMessage.style.color = 'yellow';
                }
                
                // プロジェクトビデオ要素を取得
                const projectVideo = document.getElementById('projectVideo');
                const videoSource = document.getElementById('videoSource');

                if (projectVideo && videoSource) {
                    // ビデオソースを設定
                    videoSource.src = videoPath;
                    videoSource.load(); // 明示的に読み込み
                    
                    // a-videoにアセットのIDを指定
                    projectVideo.setAttribute('src', '#videoSource');
                    projectVideo.setAttribute('visible', 'true');
                    
                    // デバッグ情報を表示
                    console.log('動画要素にソースを設定:', videoSource);
                    
                    // 明示的に再生を試みる
                    videoSource.play().catch(e => {
                        console.error('動画再生エラー:', e);
                        if (errorMessage) errorMessage.textContent = `動画エラー: ${e.message}`;
                    });
                    
                    // 動画再生終了イベントを追加
                    videoSource.addEventListener('ended', () => {
                        console.log('動画再生が完了しました');
                        videoCompleted = true;
                        
                        // お礼メッセージを表示
                        if (thankYouContainer) thankYouContainer.style.display = 'block';
                        
                        // 選択されたプロジェクトIDをメッセージページ用に保存
                        sessionStorage.setItem('messageProject', sessionStorage.getItem('selectedProject'));
                    });
                }
            });
            
            // マーカーが見つからなくなったときの処理
            marker.addEventListener('markerLost', () => {
                console.log('マーカーが見つかりません');
                if (markerStatus) {
                    markerStatus.textContent = '未検出';
                    markerStatus.style.color = '#ff6b6b';
                }
                
                // マーカーが見つからなくなった場合、動画が完了していなければ誘導メッセージを表示
                if (!videoCompleted && markerGuideMessage) {
                    markerGuideMessage.style.display = 'flex';
                }
            });
        }
        
        // 「もう一度見る」ボタンのイベント
        if (watchAgainButton) {
            watchAgainButton.addEventListener('click', () => {
                // ボタンを非表示にして、動画を初めから再生
                if (thankYouContainer) thankYouContainer.style.display = 'none';
                videoCompleted = false;
                
                // マーカーが見つかっていない場合は誘導メッセージを表示
                if (markerStatus && markerStatus.textContent === '未検出') {
                    if (markerGuideMessage) markerGuideMessage.style.display = 'flex';
                } else {
                    // 動画を再生
                    try {
                        const projectVideo = document.getElementById('projectVideo');
                        if (projectVideo) {
                            const videoEl = projectVideo.components.material.material.map.image;
                            if (videoEl) {
                                videoEl.currentTime = 0;
                                videoEl.play();
                            }
                        }
                    } catch (e) {
                        console.error('動画再生エラー:', e);
                    }
                }
            });
        }
    });
</script>