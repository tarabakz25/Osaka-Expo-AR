---
import Layout from '../layouts/Layout.astro';

import Fukidashi from '/Fukidashi.glb?url';
import Hanabi from '/movies/ar-movie_hanabi.mp4?url';

console.log("Fukidashiのパス:", Fukidashi);
console.log("Hanabiのパス:", Hanabi);
---

<Layout>    
    <div class="arjs-loader" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); z-index: 9999; display: flex; justify-content: center; align-items: center;">
        <div style="color: white; font-size: 1.5em;">カメラとARの読み込み中...</div>
    </div>
    
    <!-- 最初にスクリプトを読み込む -->
    <script is:inline src="https://aframe.io/releases/1.4.0/aframe.min.js"></script>
    <script is:inline src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    
    <!-- 動画再生用コンポーネント -->
    <script is:inline>
        AFRAME.registerComponent('play-on-marker', {
          init: function () {
            const marker = this.el.closest('a-marker');
            const video = document.querySelector('#hanabi-video');
            
            if (marker && video) {
              // マーカーが検出されたときに動画を再生
              marker.addEventListener('markerFound', function () {
                console.log('マーカーを検出しました！動画を再生します');
                video.muted = true; // 自動再生のためにミュート
                video.play().catch(e => {
                  console.error('動画の再生に失敗しました:', e);
                });
              });
              
              // マーカーを見失ったときに動画を一時停止
              marker.addEventListener('markerLost', function () {
                console.log('マーカーを見失いました');
                // video.pause(); // 一時停止したい場合はコメントを外す
              });
            }
          }
        });
    </script>

    <!-- シーンの定義 -->
    <a-scene embedded vr-mode-ui="enabled: false" renderer="logarithmicDepthBuffer: true;" arjs="sourceType: webcam; debugUIEnabled: false; trackingMethod: best;">
        <a-assets>
            <a-asset-item id="fukidashi-model" src={Fukidashi} response-type="arraybuffer" crossorigin="anonymous"></a-asset-item>
            <video id="hanabi-video" src={Hanabi} preload="auto" loop="true" muted crossorigin="anonymous" playsinline webkit-playsinline></video>
        </a-assets>
        
        <a-marker preset="hiro">
            <!-- 吹き出しモデル -->
            <a-entity 
            gltf-model="#fukidashi-model"
            scale="2 2 2" 
            position="0 0 0"
            rotation="0 90 -90"></a-entity>
            
            <!-- 動画を表示するプレーン -->
            <a-plane 
            material="shader: flat; src: #hanabi-video; transparent: true" 
            scale="4 3.2 3" 
            position="0 0.5 0" 
            rotation="-90 0 0"
            play-on-marker></a-plane>
        </a-marker>
        
        <a-entity camera></a-entity>
    </a-scene>
    
    <!-- ローダー処理用スクリプト -->
    <script is:inline>
        // アセットの読み込み状態を確認
        document.addEventListener('DOMContentLoaded', () => {
            const scene = document.querySelector('a-scene');
            const loader = document.querySelector('.arjs-loader');
            
            // モデルのURLをコンソールに出力
            const modelItem = document.querySelector('#fukidashi-model');
            console.log('モデルのURL:', modelItem.getAttribute('src'));
            
            // アセットが読み込まれたときのイベント
            scene.addEventListener('loaded', function() {
                console.log('シーンが読み込まれました');
                loader.style.display = 'none';
            });
            
            // モデルの読み込みエラーを監視
            const modelEntity = document.querySelector('[gltf-model]');
            modelEntity.addEventListener('model-loaded', function(e) {
                console.log('モデルの読み込みに成功しました:', e.detail);
            });
            
            modelEntity.addEventListener('model-error', function(e) {
                console.error('モデルの読み込みに失敗しました:', e.detail);
                // バックアップとして単純な箱を表示
                this.setAttribute('geometry', 'primitive: box; width: 1; height: 1; depth: 1');
                this.setAttribute('material', 'color: red');
            });
        });
    </script>
</Layout>